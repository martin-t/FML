[
    &[0xff, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00], // call [rax * 1]
    &[0xff, 0x14, 0x05, 0x80, 0xff, 0xff, 0xff], // call [rax * 1 + 0xffffff80]
    &[0xff, 0x14, 0x05, 0x00, 0x00, 0x00, 0x80], // call [rax * 1 + 0x80000000]
    &[0xff, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00], // call [rax * 8]
    &[0xff, 0x14, 0xc5, 0x80, 0xff, 0xff, 0xff], // call [rax * 8 + 0xffffff80]
    &[0xff, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x80], // call [rax * 8 + 0x80000000]
    &[0xff, 0x14, 0x3d, 0x00, 0x00, 0x00, 0x00], // call [rdi * 1]
    &[0xff, 0x14, 0x3d, 0x80, 0xff, 0xff, 0xff], // call [rdi * 1 + 0xffffff80]
    &[0xff, 0x14, 0x3d, 0x00, 0x00, 0x00, 0x80], // call [rdi * 1 + 0x80000000]
    &[0xff, 0x14, 0xfd, 0x00, 0x00, 0x00, 0x00], // call [rdi * 8]
    &[0xff, 0x14, 0xfd, 0x80, 0xff, 0xff, 0xff], // call [rdi * 8 + 0xffffff80]
    &[0xff, 0x14, 0xfd, 0x00, 0x00, 0x00, 0x80], // call [rdi * 8 + 0x80000000]
    &[0x42, 0xff, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00], // call [r8 * 1]
    &[0x42, 0xff, 0x14, 0x05, 0x80, 0xff, 0xff, 0xff], // call [r8 * 1 + 0xffffff80]
    &[0x42, 0xff, 0x14, 0x05, 0x00, 0x00, 0x00, 0x80], // call [r8 * 1 + 0x80000000]
    &[0x42, 0xff, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00], // call [r8 * 8]
    &[0x42, 0xff, 0x14, 0xc5, 0x80, 0xff, 0xff, 0xff], // call [r8 * 8 + 0xffffff80]
    &[0x42, 0xff, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x80], // call [r8 * 8 + 0x80000000]
    &[0x42, 0xff, 0x14, 0x3d, 0x00, 0x00, 0x00, 0x00], // call [r15 * 1]
    &[0x42, 0xff, 0x14, 0x3d, 0x80, 0xff, 0xff, 0xff], // call [r15 * 1 + 0xffffff80]
    &[0x42, 0xff, 0x14, 0x3d, 0x00, 0x00, 0x00, 0x80], // call [r15 * 1 + 0x80000000]
    &[0x42, 0xff, 0x14, 0xfd, 0x00, 0x00, 0x00, 0x00], // call [r15 * 8]
    &[0x42, 0xff, 0x14, 0xfd, 0x80, 0xff, 0xff, 0xff], // call [r15 * 8 + 0xffffff80]
    &[0x42, 0xff, 0x14, 0xfd, 0x00, 0x00, 0x00, 0x80], // call [r15 * 8 + 0x80000000]
    &[0xff, 0x10], // call [rax]
    &[0xff, 0x50, 0x80], // call [rax + 0xffffff80]
    &[0xff, 0x90, 0x00, 0x00, 0x00, 0x80], // call [rax + 0x80000000]
    &[0xff, 0x10], // call [rax]
    &[0xff, 0x50, 0x80], // call [rax + 0xffffff80]
    &[0xff, 0x90, 0x00, 0x00, 0x00, 0x80], // call [rax + 0x80000000]
    &[0xff, 0x14, 0x00], // call [rax + rax * 1]
    &[0xff, 0x54, 0x00, 0x80], // call [rax + rax * 1 + 0xffffff80]
    &[0xff, 0x94, 0x00, 0x00, 0x00, 0x00, 0x80], // call [rax + rax * 1 + 0x80000000]
    &[0xff, 0x14, 0xc0], // call [rax + rax * 8]
    &[0xff, 0x54, 0xc0, 0x80], // call [rax + rax * 8 + 0xffffff80]
    &[0xff, 0x94, 0xc0, 0x00, 0x00, 0x00, 0x80], // call [rax + rax * 8 + 0x80000000]
    &[0xff, 0x14, 0x38], // call [rax + rdi * 1]
    &[0xff, 0x54, 0x38, 0x80], // call [rax + rdi * 1 + 0xffffff80]
    &[0xff, 0x94, 0x38, 0x00, 0x00, 0x00, 0x80], // call [rax + rdi * 1 + 0x80000000]
    &[0xff, 0x14, 0xf8], // call [rax + rdi * 8]
    &[0xff, 0x54, 0xf8, 0x80], // call [rax + rdi * 8 + 0xffffff80]
    &[0xff, 0x94, 0xf8, 0x00, 0x00, 0x00, 0x80], // call [rax + rdi * 8 + 0x80000000]
    &[0x42, 0xff, 0x14, 0x00], // call [rax + r8 * 1]
    &[0x42, 0xff, 0x54, 0x00, 0x80], // call [rax + r8 * 1 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0x00, 0x00, 0x00, 0x00, 0x80], // call [rax + r8 * 1 + 0x80000000]
    &[0x42, 0xff, 0x14, 0xc0], // call [rax + r8 * 8]
    &[0x42, 0xff, 0x54, 0xc0, 0x80], // call [rax + r8 * 8 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0xc0, 0x00, 0x00, 0x00, 0x80], // call [rax + r8 * 8 + 0x80000000]
    &[0x42, 0xff, 0x14, 0x38], // call [rax + r15 * 1]
    &[0x42, 0xff, 0x54, 0x38, 0x80], // call [rax + r15 * 1 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0x38, 0x00, 0x00, 0x00, 0x80], // call [rax + r15 * 1 + 0x80000000]
    &[0x42, 0xff, 0x14, 0xf8], // call [rax + r15 * 8]
    &[0x42, 0xff, 0x54, 0xf8, 0x80], // call [rax + r15 * 8 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0xf8, 0x00, 0x00, 0x00, 0x80], // call [rax + r15 * 8 + 0x80000000]
    &[0xff, 0x17], // call [rdi]
    &[0xff, 0x57, 0x80], // call [rdi + 0xffffff80]
    &[0xff, 0x97, 0x00, 0x00, 0x00, 0x80], // call [rdi + 0x80000000]
    &[0xff, 0x17], // call [rdi]
    &[0xff, 0x57, 0x80], // call [rdi + 0xffffff80]
    &[0xff, 0x97, 0x00, 0x00, 0x00, 0x80], // call [rdi + 0x80000000]
    &[0xff, 0x14, 0x07], // call [rdi + rax * 1]
    &[0xff, 0x54, 0x07, 0x80], // call [rdi + rax * 1 + 0xffffff80]
    &[0xff, 0x94, 0x07, 0x00, 0x00, 0x00, 0x80], // call [rdi + rax * 1 + 0x80000000]
    &[0xff, 0x14, 0xc7], // call [rdi + rax * 8]
    &[0xff, 0x54, 0xc7, 0x80], // call [rdi + rax * 8 + 0xffffff80]
    &[0xff, 0x94, 0xc7, 0x00, 0x00, 0x00, 0x80], // call [rdi + rax * 8 + 0x80000000]
    &[0xff, 0x14, 0x3f], // call [rdi + rdi * 1]
    &[0xff, 0x54, 0x3f, 0x80], // call [rdi + rdi * 1 + 0xffffff80]
    &[0xff, 0x94, 0x3f, 0x00, 0x00, 0x00, 0x80], // call [rdi + rdi * 1 + 0x80000000]
    &[0xff, 0x14, 0xff], // call [rdi + rdi * 8]
    &[0xff, 0x54, 0xff, 0x80], // call [rdi + rdi * 8 + 0xffffff80]
    &[0xff, 0x94, 0xff, 0x00, 0x00, 0x00, 0x80], // call [rdi + rdi * 8 + 0x80000000]
    &[0x42, 0xff, 0x14, 0x07], // call [rdi + r8 * 1]
    &[0x42, 0xff, 0x54, 0x07, 0x80], // call [rdi + r8 * 1 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0x07, 0x00, 0x00, 0x00, 0x80], // call [rdi + r8 * 1 + 0x80000000]
    &[0x42, 0xff, 0x14, 0xc7], // call [rdi + r8 * 8]
    &[0x42, 0xff, 0x54, 0xc7, 0x80], // call [rdi + r8 * 8 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0xc7, 0x00, 0x00, 0x00, 0x80], // call [rdi + r8 * 8 + 0x80000000]
    &[0x42, 0xff, 0x14, 0x3f], // call [rdi + r15 * 1]
    &[0x42, 0xff, 0x54, 0x3f, 0x80], // call [rdi + r15 * 1 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0x3f, 0x00, 0x00, 0x00, 0x80], // call [rdi + r15 * 1 + 0x80000000]
    &[0x42, 0xff, 0x14, 0xff], // call [rdi + r15 * 8]
    &[0x42, 0xff, 0x54, 0xff, 0x80], // call [rdi + r15 * 8 + 0xffffff80]
    &[0x42, 0xff, 0x94, 0xff, 0x00, 0x00, 0x00, 0x80], // call [rdi + r15 * 8 + 0x80000000]
    &[0x41, 0xff, 0x10], // call [r8]
    &[0x41, 0xff, 0x50, 0x80], // call [r8 + 0xffffff80]
    &[0x41, 0xff, 0x90, 0x00, 0x00, 0x00, 0x80], // call [r8 + 0x80000000]
    &[0x41, 0xff, 0x10], // call [r8]
    &[0x41, 0xff, 0x50, 0x80], // call [r8 + 0xffffff80]
    &[0x41, 0xff, 0x90, 0x00, 0x00, 0x00, 0x80], // call [r8 + 0x80000000]
    &[0x41, 0xff, 0x14, 0x00], // call [r8 + rax * 1]
    &[0x41, 0xff, 0x54, 0x00, 0x80], // call [r8 + rax * 1 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0x00, 0x00, 0x00, 0x00, 0x80], // call [r8 + rax * 1 + 0x80000000]
    &[0x41, 0xff, 0x14, 0xc0], // call [r8 + rax * 8]
    &[0x41, 0xff, 0x54, 0xc0, 0x80], // call [r8 + rax * 8 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0xc0, 0x00, 0x00, 0x00, 0x80], // call [r8 + rax * 8 + 0x80000000]
    &[0x41, 0xff, 0x14, 0x38], // call [r8 + rdi * 1]
    &[0x41, 0xff, 0x54, 0x38, 0x80], // call [r8 + rdi * 1 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0x38, 0x00, 0x00, 0x00, 0x80], // call [r8 + rdi * 1 + 0x80000000]
    &[0x41, 0xff, 0x14, 0xf8], // call [r8 + rdi * 8]
    &[0x41, 0xff, 0x54, 0xf8, 0x80], // call [r8 + rdi * 8 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0xf8, 0x00, 0x00, 0x00, 0x80], // call [r8 + rdi * 8 + 0x80000000]
    &[0x43, 0xff, 0x14, 0x00], // call [r8 + r8 * 1]
    &[0x43, 0xff, 0x54, 0x00, 0x80], // call [r8 + r8 * 1 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0x00, 0x00, 0x00, 0x00, 0x80], // call [r8 + r8 * 1 + 0x80000000]
    &[0x43, 0xff, 0x14, 0xc0], // call [r8 + r8 * 8]
    &[0x43, 0xff, 0x54, 0xc0, 0x80], // call [r8 + r8 * 8 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0xc0, 0x00, 0x00, 0x00, 0x80], // call [r8 + r8 * 8 + 0x80000000]
    &[0x43, 0xff, 0x14, 0x38], // call [r8 + r15 * 1]
    &[0x43, 0xff, 0x54, 0x38, 0x80], // call [r8 + r15 * 1 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0x38, 0x00, 0x00, 0x00, 0x80], // call [r8 + r15 * 1 + 0x80000000]
    &[0x43, 0xff, 0x14, 0xf8], // call [r8 + r15 * 8]
    &[0x43, 0xff, 0x54, 0xf8, 0x80], // call [r8 + r15 * 8 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0xf8, 0x00, 0x00, 0x00, 0x80], // call [r8 + r15 * 8 + 0x80000000]
    &[0x41, 0xff, 0x17], // call [r15]
    &[0x41, 0xff, 0x57, 0x80], // call [r15 + 0xffffff80]
    &[0x41, 0xff, 0x97, 0x00, 0x00, 0x00, 0x80], // call [r15 + 0x80000000]
    &[0x41, 0xff, 0x17], // call [r15]
    &[0x41, 0xff, 0x57, 0x80], // call [r15 + 0xffffff80]
    &[0x41, 0xff, 0x97, 0x00, 0x00, 0x00, 0x80], // call [r15 + 0x80000000]
    &[0x41, 0xff, 0x14, 0x07], // call [r15 + rax * 1]
    &[0x41, 0xff, 0x54, 0x07, 0x80], // call [r15 + rax * 1 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0x07, 0x00, 0x00, 0x00, 0x80], // call [r15 + rax * 1 + 0x80000000]
    &[0x41, 0xff, 0x14, 0xc7], // call [r15 + rax * 8]
    &[0x41, 0xff, 0x54, 0xc7, 0x80], // call [r15 + rax * 8 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0xc7, 0x00, 0x00, 0x00, 0x80], // call [r15 + rax * 8 + 0x80000000]
    &[0x41, 0xff, 0x14, 0x3f], // call [r15 + rdi * 1]
    &[0x41, 0xff, 0x54, 0x3f, 0x80], // call [r15 + rdi * 1 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0x3f, 0x00, 0x00, 0x00, 0x80], // call [r15 + rdi * 1 + 0x80000000]
    &[0x41, 0xff, 0x14, 0xff], // call [r15 + rdi * 8]
    &[0x41, 0xff, 0x54, 0xff, 0x80], // call [r15 + rdi * 8 + 0xffffff80]
    &[0x41, 0xff, 0x94, 0xff, 0x00, 0x00, 0x00, 0x80], // call [r15 + rdi * 8 + 0x80000000]
    &[0x43, 0xff, 0x14, 0x07], // call [r15 + r8 * 1]
    &[0x43, 0xff, 0x54, 0x07, 0x80], // call [r15 + r8 * 1 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0x07, 0x00, 0x00, 0x00, 0x80], // call [r15 + r8 * 1 + 0x80000000]
    &[0x43, 0xff, 0x14, 0xc7], // call [r15 + r8 * 8]
    &[0x43, 0xff, 0x54, 0xc7, 0x80], // call [r15 + r8 * 8 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0xc7, 0x00, 0x00, 0x00, 0x80], // call [r15 + r8 * 8 + 0x80000000]
    &[0x43, 0xff, 0x14, 0x3f], // call [r15 + r15 * 1]
    &[0x43, 0xff, 0x54, 0x3f, 0x80], // call [r15 + r15 * 1 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0x3f, 0x00, 0x00, 0x00, 0x80], // call [r15 + r15 * 1 + 0x80000000]
    &[0x43, 0xff, 0x14, 0xff], // call [r15 + r15 * 8]
    &[0x43, 0xff, 0x54, 0xff, 0x80], // call [r15 + r15 * 8 + 0xffffff80]
    &[0x43, 0xff, 0x94, 0xff, 0x00, 0x00, 0x00, 0x80], // call [r15 + r15 * 8 + 0x80000000]
    &[0xff, 0x14, 0x4d, 0x2a, 0x00, 0x00, 0x00], // call [rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x48, 0x2a], // call [rax + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x49, 0x2a], // call [rcx + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x4a, 0x2a], // call [rdx + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x4b, 0x2a], // call [rbx + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x4d, 0x2a], // call [rbp + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x4e, 0x2a], // call [rsi + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x4f, 0x2a], // call [rdi + rcx * 2 + 0x2a]
    &[0x41, 0xff, 0x54, 0x48, 0x2a], // call [r8 + rcx * 2 + 0x2a]
    &[0x41, 0xff, 0x54, 0x49, 0x2a], // call [r9 + rcx * 2 + 0x2a]
    &[0x41, 0xff, 0x54, 0x4a, 0x2a], // call [r10 + rcx * 2 + 0x2a]
    &[0x41, 0xff, 0x54, 0x4b, 0x2a], // call [r11 + rcx * 2 + 0x2a]
    &[0x41, 0xff, 0x54, 0x4d, 0x2a], // call [r13 + rcx * 2 + 0x2a]
    &[0x41, 0xff, 0x54, 0x4e, 0x2a], // call [r14 + rcx * 2 + 0x2a]
    &[0x41, 0xff, 0x54, 0x4f, 0x2a], // call [r15 + rcx * 2 + 0x2a]
    &[0xff, 0x52, 0x2a], // call [rdx + 0x2a]
    &[0xff, 0x54, 0x42, 0x2a], // call [rdx + rax * 2 + 0x2a]
    &[0xff, 0x54, 0x4a, 0x2a], // call [rdx + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x52, 0x2a], // call [rdx + rdx * 2 + 0x2a]
    &[0xff, 0x54, 0x5a, 0x2a], // call [rdx + rbx * 2 + 0x2a]
    &[0xff, 0x54, 0x6a, 0x2a], // call [rdx + rbp * 2 + 0x2a]
    &[0xff, 0x54, 0x72, 0x2a], // call [rdx + rsi * 2 + 0x2a]
    &[0xff, 0x54, 0x7a, 0x2a], // call [rdx + rdi * 2 + 0x2a]
    &[0x42, 0xff, 0x54, 0x42, 0x2a], // call [rdx + r8 * 2 + 0x2a]
    &[0x42, 0xff, 0x54, 0x4a, 0x2a], // call [rdx + r9 * 2 + 0x2a]
    &[0x42, 0xff, 0x54, 0x52, 0x2a], // call [rdx + r10 * 2 + 0x2a]
    &[0x42, 0xff, 0x54, 0x5a, 0x2a], // call [rdx + r11 * 2 + 0x2a]
    &[0x42, 0xff, 0x54, 0x6a, 0x2a], // call [rdx + r13 * 2 + 0x2a]
    &[0x42, 0xff, 0x54, 0x72, 0x2a], // call [rdx + r14 * 2 + 0x2a]
    &[0x42, 0xff, 0x54, 0x7a, 0x2a], // call [rdx + r15 * 2 + 0x2a]
    &[0xff, 0x54, 0x0a, 0x2a], // call [rdx + rcx * 1 + 0x2a]
    &[0xff, 0x54, 0x4a, 0x2a], // call [rdx + rcx * 2 + 0x2a]
    &[0xff, 0x54, 0x8a, 0x2a], // call [rdx + rcx * 4 + 0x2a]
    &[0xff, 0x54, 0xca, 0x2a], // call [rdx + rcx * 8 + 0x2a]
    &[0xff, 0x14, 0x4a], // call [rdx + rcx * 2]
    &[0xff, 0x54, 0x4a, 0x01], // call [rdx + rcx * 2 + 0x1]
    &[0xff, 0x54, 0x4a, 0xff], // call [rdx + rcx * 2 + 0xffffffff]
    &[0xff, 0x54, 0x4a, 0x7f], // call [rdx + rcx * 2 + 0x7f]
    &[0xff, 0x54, 0x4a, 0x80], // call [rdx + rcx * 2 + 0xffffff80]
    &[0xff, 0x94, 0x4a, 0x80, 0x00, 0x00, 0x00], // call [rdx + rcx * 2 + 0x80]
    &[0xff, 0x94, 0x4a, 0x7f, 0xff, 0xff, 0xff], // call [rdx + rcx * 2 + 0xffffff7f]
    &[0xff, 0x94, 0x4a, 0xff, 0xff, 0xff, 0x7f], // call [rdx + rcx * 2 + 0x7fffffff]
    &[0xff, 0x94, 0x4a, 0x00, 0x00, 0x00, 0x80], // call [rdx + rcx * 2 + 0x80000000]
]
