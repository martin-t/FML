<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="661" width="0.1008%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="645" width="0.1008%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="629" width="0.1008%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="613" width="0.1008%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="597" width="0.1008%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="581" width="0.1008%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="565" width="0.1008%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="549" width="0.1008%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="533" width="0.1008%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="0.0000%" y="517" width="0.1008%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;fml::bytecode::heap::HeapObject&gt; (4 samples, 0.13%)</title><rect x="0.2017%" y="517" width="0.1345%" height="15" fill="rgb(250,228,42)"/><text x="0.4517%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;fml::bytecode::heap::ObjectInstance&gt; (3 samples, 0.10%)</title><rect x="0.2353%" y="501" width="0.1008%" height="15" fill="rgb(240,193,28)"/><text x="0.4853%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::IndexMap&lt;alloc::string::String,fml::bytecode::heap::Pointer&gt;&gt; (3 samples, 0.10%)</title><rect x="0.2353%" y="485" width="0.1008%" height="15" fill="rgb(216,20,37)"/><text x="0.4853%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::IndexMapCore&lt;alloc::string::String,fml::bytecode::heap::Pointer&gt;&gt; (3 samples, 0.10%)</title><rect x="0.2353%" y="469" width="0.1008%" height="15" fill="rgb(206,188,39)"/><text x="0.4853%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;alloc::string::String,fml::bytecode::heap::Pointer&gt;&gt;&gt; (3 samples, 0.10%)</title><rect x="0.2353%" y="453" width="0.1008%" height="15" fill="rgb(217,207,13)"/><text x="0.4853%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;fml::bytecode::state::State&gt; (9 samples, 0.30%)</title><rect x="0.1345%" y="597" width="0.3025%" height="15" fill="rgb(231,73,38)"/><text x="0.3845%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;fml::bytecode::heap::Heap&gt; (9 samples, 0.30%)</title><rect x="0.1345%" y="581" width="0.3025%" height="15" fill="rgb(225,20,46)"/><text x="0.3845%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fml::bytecode::heap::HeapObject&gt;&gt; (9 samples, 0.30%)</title><rect x="0.1345%" y="565" width="0.3025%" height="15" fill="rgb(210,31,41)"/><text x="0.3845%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.30%)</title><rect x="0.1345%" y="549" width="0.3025%" height="15" fill="rgb(221,200,47)"/><text x="0.3845%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[fml::bytecode::heap::HeapObject]&gt; (9 samples, 0.30%)</title><rect x="0.1345%" y="533" width="0.3025%" height="15" fill="rgb(226,26,5)"/><text x="0.3845%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::IndexMap&lt;alloc::string::String,fml::bytecode::program::ProgramObject&gt;&gt; (3 samples, 0.10%)</title><rect x="0.3361%" y="517" width="0.1008%" height="15" fill="rgb(249,33,26)"/><text x="0.5861%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::IndexMapCore&lt;alloc::string::String,fml::bytecode::program::ProgramObject&gt;&gt; (3 samples, 0.10%)</title><rect x="0.3361%" y="501" width="0.1008%" height="15" fill="rgb(235,183,28)"/><text x="0.5861%" y="511.50"></text></g><g><title>__GI___libc_free (6 samples, 0.20%)</title><rect x="14.0504%" y="565" width="0.2017%" height="15" fill="rgb(221,5,38)"/><text x="14.3004%" y="575.50"></text></g><g><title>__rust_dealloc (9 samples, 0.30%)</title><rect x="14.2521%" y="565" width="0.3025%" height="15" fill="rgb(247,18,42)"/><text x="14.5021%" y="575.50"></text></g><g><title>_int_free (19 samples, 0.64%)</title><rect x="14.5546%" y="565" width="0.6387%" height="15" fill="rgb(241,131,45)"/><text x="14.8046%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (37 samples, 1.24%)</title><rect x="15.1933%" y="549" width="1.2437%" height="15" fill="rgb(249,31,29)"/><text x="15.4433%" y="559.50"></text></g><g><title>fml::bytecode::heap::Pointer::evaluate_as_condition (31 samples, 1.04%)</title><rect x="16.4370%" y="549" width="1.0420%" height="15" fill="rgb(225,111,53)"/><text x="16.6870%" y="559.50"></text></g><g><title>fml::bytecode::program::ProgramObject::as_str (8 samples, 0.27%)</title><rect x="17.5462%" y="549" width="0.2689%" height="15" fill="rgb(238,160,17)"/><text x="17.7962%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.10%)</title><rect x="17.8151%" y="533" width="0.1008%" height="15" fill="rgb(214,148,48)"/><text x="18.0651%" y="543.50"></text></g><g><title>fml::bytecode::interpreter::eval_branch (99 samples, 3.33%)</title><rect x="15.1933%" y="565" width="3.3277%" height="15" fill="rgb(232,36,49)"/><text x="15.4433%" y="575.50">fml..</text></g><g><title>fml::bytecode::state::OperandStack::pop (21 samples, 0.71%)</title><rect x="17.8151%" y="549" width="0.7059%" height="15" fill="rgb(209,103,24)"/><text x="18.0651%" y="559.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,core::convert::Infallible&gt; for core::option::Option&lt;T&gt;&gt;::with_context (18 samples, 0.61%)</title><rect x="17.9160%" y="533" width="0.6050%" height="15" fill="rgb(229,88,8)"/><text x="18.1660%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (18 samples, 0.61%)</title><rect x="17.9160%" y="517" width="0.6050%" height="15" fill="rgb(213,181,19)"/><text x="18.1660%" y="527.50"></text></g><g><title>fml::bytecode::interpreter::eval_call_function (4 samples, 0.13%)</title><rect x="18.5210%" y="565" width="0.1345%" height="15" fill="rgb(254,191,54)"/><text x="18.7710%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (91 samples, 3.06%)</title><rect x="21.2773%" y="549" width="3.0588%" height="15" fill="rgb(241,83,37)"/><text x="21.5273%" y="559.50">&lt;co..</text></g><g><title>fml::bytecode::heap::Heap::dereference_mut (4 samples, 0.13%)</title><rect x="27.1933%" y="533" width="0.1345%" height="15" fill="rgb(233,36,39)"/><text x="27.4433%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (4 samples, 0.13%)</title><rect x="27.1933%" y="517" width="0.1345%" height="15" fill="rgb(226,3,54)"/><text x="27.4433%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (4 samples, 0.13%)</title><rect x="27.1933%" y="501" width="0.1345%" height="15" fill="rgb(245,192,40)"/><text x="27.4433%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.17%)</title><rect x="27.4286%" y="485" width="0.1681%" height="15" fill="rgb(238,167,29)"/><text x="27.6786%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.17%)</title><rect x="27.4286%" y="469" width="0.1681%" height="15" fill="rgb(232,182,51)"/><text x="27.6786%" y="479.50"></text></g><g><title>fml::bytecode::heap::Pointer::push_onto (9 samples, 0.30%)</title><rect x="27.3277%" y="533" width="0.3025%" height="15" fill="rgb(231,60,39)"/><text x="27.5777%" y="543.50"></text></g><g><title>fml::bytecode::state::OperandStack::push (9 samples, 0.30%)</title><rect x="27.3277%" y="517" width="0.3025%" height="15" fill="rgb(208,69,12)"/><text x="27.5777%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.30%)</title><rect x="27.3277%" y="501" width="0.3025%" height="15" fill="rgb(235,93,37)"/><text x="27.5777%" y="511.50"></text></g><g><title>__rust_dealloc (3 samples, 0.10%)</title><rect x="27.7311%" y="517" width="0.1008%" height="15" fill="rgb(213,116,39)"/><text x="27.9811%" y="527.50"></text></g><g><title>_int_free (8 samples, 0.27%)</title><rect x="27.8319%" y="517" width="0.2689%" height="15" fill="rgb(222,207,29)"/><text x="28.0819%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.10%)</title><rect x="28.1008%" y="517" width="0.1008%" height="15" fill="rgb(206,96,30)"/><text x="28.3508%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.10%)</title><rect x="28.1008%" y="501" width="0.1008%" height="15" fill="rgb(218,138,4)"/><text x="28.3508%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.10%)</title><rect x="28.1008%" y="485" width="0.1008%" height="15" fill="rgb(250,191,14)"/><text x="28.3508%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.10%)</title><rect x="28.1008%" y="469" width="0.1008%" height="15" fill="rgb(239,60,40)"/><text x="28.3508%" y="479.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_array_method (26 samples, 0.87%)</title><rect x="27.6303%" y="533" width="0.8739%" height="15" fill="rgb(206,27,48)"/><text x="27.8803%" y="543.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_array_get_method (9 samples, 0.30%)</title><rect x="28.2017%" y="517" width="0.3025%" height="15" fill="rgb(225,35,8)"/><text x="28.4517%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (7 samples, 0.24%)</title><rect x="28.2689%" y="501" width="0.2353%" height="15" fill="rgb(250,213,24)"/><text x="28.5189%" y="511.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_array_get_method::{{closure}} (7 samples, 0.24%)</title><rect x="28.2689%" y="485" width="0.2353%" height="15" fill="rgb(247,123,22)"/><text x="28.5189%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fml::bytecode::heap::Pointer&gt;&gt; (9 samples, 0.30%)</title><rect x="28.5042%" y="517" width="0.3025%" height="15" fill="rgb(231,138,38)"/><text x="28.7542%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fml::bytecode::heap::Pointer&gt;&gt; (9 samples, 0.30%)</title><rect x="28.5042%" y="501" width="0.3025%" height="15" fill="rgb(231,145,46)"/><text x="28.7542%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.30%)</title><rect x="28.5042%" y="485" width="0.3025%" height="15" fill="rgb(251,118,11)"/><text x="28.7542%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.30%)</title><rect x="28.5042%" y="469" width="0.3025%" height="15" fill="rgb(217,147,25)"/><text x="28.7542%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.30%)</title><rect x="28.5042%" y="453" width="0.3025%" height="15" fill="rgb(247,81,37)"/><text x="28.7542%" y="463.50"></text></g><g><title>_int_free (4 samples, 0.13%)</title><rect x="28.6723%" y="437" width="0.1345%" height="15" fill="rgb(209,12,38)"/><text x="28.9223%" y="447.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_boolean_method (10 samples, 0.34%)</title><rect x="28.5042%" y="533" width="0.3361%" height="15" fill="rgb(227,1,9)"/><text x="28.7542%" y="543.50"></text></g><g><title>__GI___libc_free (11 samples, 0.37%)</title><rect x="29.9496%" y="437" width="0.3697%" height="15" fill="rgb(248,47,43)"/><text x="30.1996%" y="447.50"></text></g><g><title>__rust_dealloc (16 samples, 0.54%)</title><rect x="30.3529%" y="437" width="0.5378%" height="15" fill="rgb(221,10,30)"/><text x="30.6029%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (55 samples, 1.85%)</title><rect x="29.8487%" y="469" width="1.8487%" height="15" fill="rgb(210,229,1)"/><text x="30.0987%" y="479.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (53 samples, 1.78%)</title><rect x="29.9160%" y="453" width="1.7815%" height="15" fill="rgb(222,148,37)"/><text x="30.1660%" y="463.50">a..</text></g><g><title>_int_free (24 samples, 0.81%)</title><rect x="30.8908%" y="437" width="0.8067%" height="15" fill="rgb(234,67,33)"/><text x="31.1408%" y="447.50"></text></g><g><title>tcache_put (4 samples, 0.13%)</title><rect x="31.5630%" y="421" width="0.1345%" height="15" fill="rgb(247,98,35)"/><text x="31.8130%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fml::bytecode::heap::Pointer&gt;&gt; (60 samples, 2.02%)</title><rect x="29.7479%" y="517" width="2.0168%" height="15" fill="rgb(247,138,52)"/><text x="29.9979%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fml::bytecode::heap::Pointer&gt;&gt; (60 samples, 2.02%)</title><rect x="29.7479%" y="501" width="2.0168%" height="15" fill="rgb(213,79,30)"/><text x="29.9979%" y="511.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 2.02%)</title><rect x="29.7479%" y="485" width="2.0168%" height="15" fill="rgb(246,177,23)"/><text x="29.9979%" y="495.50">&lt;..</text></g><g><title>fml::bytecode::interpreter::dispatch_integer_method (103 samples, 3.46%)</title><rect x="28.8403%" y="533" width="3.4622%" height="15" fill="rgb(230,62,27)"/><text x="29.0903%" y="543.50">fml..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (16 samples, 0.54%)</title><rect x="31.7647%" y="517" width="0.5378%" height="15" fill="rgb(216,154,8)"/><text x="32.0147%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.54%)</title><rect x="31.7647%" y="501" width="0.5378%" height="15" fill="rgb(244,35,45)"/><text x="32.0147%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (16 samples, 0.54%)</title><rect x="31.7647%" y="485" width="0.5378%" height="15" fill="rgb(251,115,12)"/><text x="32.0147%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (16 samples, 0.54%)</title><rect x="31.7647%" y="469" width="0.5378%" height="15" fill="rgb(240,54,50)"/><text x="32.0147%" y="479.50"></text></g><g><title>__rust_dealloc (5 samples, 0.17%)</title><rect x="32.5042%" y="437" width="0.1681%" height="15" fill="rgb(233,84,52)"/><text x="32.7542%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fml::bytecode::heap::Pointer&gt;&gt; (16 samples, 0.54%)</title><rect x="32.3697%" y="517" width="0.5378%" height="15" fill="rgb(207,117,47)"/><text x="32.6197%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fml::bytecode::heap::Pointer&gt;&gt; (16 samples, 0.54%)</title><rect x="32.3697%" y="501" width="0.5378%" height="15" fill="rgb(249,43,39)"/><text x="32.6197%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.54%)</title><rect x="32.3697%" y="485" width="0.5378%" height="15" fill="rgb(209,38,44)"/><text x="32.6197%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.54%)</title><rect x="32.3697%" y="469" width="0.5378%" height="15" fill="rgb(236,212,23)"/><text x="32.6197%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.54%)</title><rect x="32.3697%" y="453" width="0.5378%" height="15" fill="rgb(242,79,21)"/><text x="32.6197%" y="463.50"></text></g><g><title>_int_free (7 samples, 0.24%)</title><rect x="32.6723%" y="437" width="0.2353%" height="15" fill="rgb(211,96,35)"/><text x="32.9223%" y="447.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_null_method (19 samples, 0.64%)</title><rect x="32.3025%" y="533" width="0.6387%" height="15" fill="rgb(253,215,40)"/><text x="32.5525%" y="543.50"></text></g><g><title>&lt;fml::bytecode::heap::Pointer as core::clone::Clone&gt;::clone (4 samples, 0.13%)</title><rect x="33.4790%" y="517" width="0.1345%" height="15" fill="rgb(211,81,21)"/><text x="33.7290%" y="527.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="33.7815%" y="277" width="0.1008%" height="15" fill="rgb(208,190,38)"/><text x="34.0315%" y="287.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.50%)</title><rect x="33.6134%" y="293" width="0.5042%" height="15" fill="rgb(235,213,38)"/><text x="33.8634%" y="303.50"></text></g><g><title>tcache_get (6 samples, 0.20%)</title><rect x="33.9160%" y="277" width="0.2017%" height="15" fill="rgb(237,122,38)"/><text x="34.1660%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.74%)</title><rect x="33.6134%" y="389" width="0.7395%" height="15" fill="rgb(244,218,35)"/><text x="33.8634%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.74%)</title><rect x="33.6134%" y="373" width="0.7395%" height="15" fill="rgb(240,68,47)"/><text x="33.8634%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.74%)</title><rect x="33.6134%" y="357" width="0.7395%" height="15" fill="rgb(210,16,53)"/><text x="33.8634%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.74%)</title><rect x="33.6134%" y="341" width="0.7395%" height="15" fill="rgb(235,124,12)"/><text x="33.8634%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.74%)</title><rect x="33.6134%" y="325" width="0.7395%" height="15" fill="rgb(224,169,11)"/><text x="33.8634%" y="335.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.74%)</title><rect x="33.6134%" y="309" width="0.7395%" height="15" fill="rgb(250,166,2)"/><text x="33.8634%" y="319.50"></text></g><g><title>__rust_alloc (5 samples, 0.17%)</title><rect x="34.1849%" y="293" width="0.1681%" height="15" fill="rgb(242,216,29)"/><text x="34.4349%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (31 samples, 1.04%)</title><rect x="33.6134%" y="469" width="1.0420%" height="15" fill="rgb(230,116,27)"/><text x="33.8634%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (31 samples, 1.04%)</title><rect x="33.6134%" y="453" width="1.0420%" height="15" fill="rgb(228,99,48)"/><text x="33.8634%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (31 samples, 1.04%)</title><rect x="33.6134%" y="437" width="1.0420%" height="15" fill="rgb(253,11,6)"/><text x="33.8634%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 1.04%)</title><rect x="33.6134%" y="421" width="1.0420%" height="15" fill="rgb(247,143,39)"/><text x="33.8634%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 1.04%)</title><rect x="33.6134%" y="405" width="1.0420%" height="15" fill="rgb(236,97,10)"/><text x="33.8634%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.30%)</title><rect x="34.3529%" y="389" width="0.3025%" height="15" fill="rgb(233,208,19)"/><text x="34.6029%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.30%)</title><rect x="34.3529%" y="373" width="0.3025%" height="15" fill="rgb(216,164,2)"/><text x="34.6029%" y="383.50"></text></g><g><title>__memcpy_ssse3 (7 samples, 0.24%)</title><rect x="34.4202%" y="357" width="0.2353%" height="15" fill="rgb(220,129,5)"/><text x="34.6702%" y="367.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (33 samples, 1.11%)</title><rect x="33.6134%" y="517" width="1.1092%" height="15" fill="rgb(242,17,10)"/><text x="33.8634%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (33 samples, 1.11%)</title><rect x="33.6134%" y="501" width="1.1092%" height="15" fill="rgb(242,107,0)"/><text x="33.8634%" y="511.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (33 samples, 1.11%)</title><rect x="33.6134%" y="485" width="1.1092%" height="15" fill="rgb(251,28,31)"/><text x="33.8634%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.24%)</title><rect x="34.7227%" y="517" width="0.2353%" height="15" fill="rgb(233,223,10)"/><text x="34.9727%" y="527.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_object_method::{{closure}} (3 samples, 0.10%)</title><rect x="34.8571%" y="501" width="0.1008%" height="15" fill="rgb(215,21,27)"/><text x="35.1071%" y="511.50"></text></g><g><title>&lt;fml::bytecode::program::ProgramObject as core::clone::Clone&gt;::clone (3 samples, 0.10%)</title><rect x="34.8571%" y="485" width="0.1008%" height="15" fill="rgb(232,23,21)"/><text x="35.1071%" y="495.50"></text></g><g><title>__GI___libc_free (6 samples, 0.20%)</title><rect x="35.0588%" y="421" width="0.2017%" height="15" fill="rgb(244,5,23)"/><text x="35.3088%" y="431.50"></text></g><g><title>__rust_dealloc (6 samples, 0.20%)</title><rect x="35.2941%" y="421" width="0.2017%" height="15" fill="rgb(226,81,46)"/><text x="35.5441%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (39 samples, 1.31%)</title><rect x="34.9580%" y="517" width="1.3109%" height="15" fill="rgb(247,70,30)"/><text x="35.2080%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (39 samples, 1.31%)</title><rect x="34.9580%" y="501" width="1.3109%" height="15" fill="rgb(212,68,19)"/><text x="35.2080%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (39 samples, 1.31%)</title><rect x="34.9580%" y="485" width="1.3109%" height="15" fill="rgb(240,187,13)"/><text x="35.2080%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 1.31%)</title><rect x="34.9580%" y="469" width="1.3109%" height="15" fill="rgb(223,113,26)"/><text x="35.2080%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 1.28%)</title><rect x="34.9916%" y="453" width="1.2773%" height="15" fill="rgb(206,192,2)"/><text x="35.2416%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 1.28%)</title><rect x="34.9916%" y="437" width="1.2773%" height="15" fill="rgb(241,108,4)"/><text x="35.2416%" y="447.50"></text></g><g><title>_int_free (23 samples, 0.77%)</title><rect x="35.4958%" y="421" width="0.7731%" height="15" fill="rgb(247,173,49)"/><text x="35.7458%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="437" width="0.2017%" height="15" fill="rgb(224,114,35)"/><text x="36.9223%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="421" width="0.2017%" height="15" fill="rgb(245,159,27)"/><text x="36.9223%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="405" width="0.2017%" height="15" fill="rgb(245,172,44)"/><text x="36.9223%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="389" width="0.2017%" height="15" fill="rgb(236,23,11)"/><text x="36.9223%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="373" width="0.2017%" height="15" fill="rgb(205,117,38)"/><text x="36.9223%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="357" width="0.2017%" height="15" fill="rgb(237,72,25)"/><text x="36.9223%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="341" width="0.2017%" height="15" fill="rgb(244,70,9)"/><text x="36.9223%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="325" width="0.2017%" height="15" fill="rgb(217,125,39)"/><text x="36.9223%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="309" width="0.2017%" height="15" fill="rgb(235,36,10)"/><text x="36.9223%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="293" width="0.2017%" height="15" fill="rgb(251,123,47)"/><text x="36.9223%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="277" width="0.2017%" height="15" fill="rgb(221,13,13)"/><text x="36.9223%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="36.6723%" y="261" width="0.2017%" height="15" fill="rgb(238,131,9)"/><text x="36.9223%" y="271.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.20%)</title><rect x="36.8739%" y="437" width="0.2017%" height="15" fill="rgb(211,50,8)"/><text x="37.1239%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.74%)</title><rect x="36.6050%" y="501" width="0.7395%" height="15" fill="rgb(245,182,24)"/><text x="36.8550%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.74%)</title><rect x="36.6050%" y="485" width="0.7395%" height="15" fill="rgb(242,14,37)"/><text x="36.8550%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.74%)</title><rect x="36.6050%" y="469" width="0.7395%" height="15" fill="rgb(246,228,12)"/><text x="36.8550%" y="479.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.74%)</title><rect x="36.6050%" y="453" width="0.7395%" height="15" fill="rgb(213,55,15)"/><text x="36.8550%" y="463.50"></text></g><g><title>__rust_alloc (7 samples, 0.24%)</title><rect x="37.1092%" y="437" width="0.2353%" height="15" fill="rgb(209,9,3)"/><text x="37.3592%" y="447.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.13%)</title><rect x="37.3445%" y="469" width="0.1345%" height="15" fill="rgb(230,59,30)"/><text x="37.5945%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.77%)</title><rect x="38.7899%" y="421" width="0.7731%" height="15" fill="rgb(209,121,21)"/><text x="39.0399%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (10 samples, 0.34%)</title><rect x="39.2269%" y="405" width="0.3361%" height="15" fill="rgb(220,109,13)"/><text x="39.4769%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.17%)</title><rect x="39.5630%" y="421" width="0.1681%" height="15" fill="rgb(232,18,1)"/><text x="39.8130%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="39.6303%" y="405" width="0.1008%" height="15" fill="rgb(215,41,42)"/><text x="39.8803%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="41.5462%" y="357" width="0.1345%" height="15" fill="rgb(224,123,36)"/><text x="41.7962%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.13%)</title><rect x="41.6807%" y="341" width="0.1345%" height="15" fill="rgb(240,125,3)"/><text x="41.9307%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (4 samples, 0.13%)</title><rect x="41.6807%" y="325" width="0.1345%" height="15" fill="rgb(205,98,50)"/><text x="41.9307%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5 samples, 0.17%)</title><rect x="41.6807%" y="357" width="0.1681%" height="15" fill="rgb(205,185,37)"/><text x="41.9307%" y="367.50"></text></g><g><title>__GI___libc_free (4 samples, 0.13%)</title><rect x="41.8824%" y="229" width="0.1345%" height="15" fill="rgb(238,207,15)"/><text x="42.1324%" y="239.50"></text></g><g><title>__rust_dealloc (15 samples, 0.50%)</title><rect x="42.0504%" y="229" width="0.5042%" height="15" fill="rgb(213,199,42)"/><text x="42.3004%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (71 samples, 2.39%)</title><rect x="41.0756%" y="389" width="2.3866%" height="15" fill="rgb(235,201,11)"/><text x="41.3256%" y="399.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 2.05%)</title><rect x="41.4118%" y="373" width="2.0504%" height="15" fill="rgb(207,46,11)"/><text x="41.6618%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;fml::bytecode::heap::Pointer&gt;&gt; (48 samples, 1.61%)</title><rect x="41.8487%" y="357" width="1.6134%" height="15" fill="rgb(241,35,35)"/><text x="42.0987%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 1.61%)</title><rect x="41.8487%" y="341" width="1.6134%" height="15" fill="rgb(243,32,47)"/><text x="42.0987%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;fml::bytecode::heap::Pointer,alloc::alloc::Global&gt;&gt; (48 samples, 1.61%)</title><rect x="41.8487%" y="325" width="1.6134%" height="15" fill="rgb(247,202,23)"/><text x="42.0987%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 1.61%)</title><rect x="41.8487%" y="309" width="1.6134%" height="15" fill="rgb(219,102,11)"/><text x="42.0987%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fml::bytecode::heap::Pointer&gt;&gt; (48 samples, 1.61%)</title><rect x="41.8487%" y="293" width="1.6134%" height="15" fill="rgb(243,110,44)"/><text x="42.0987%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 1.61%)</title><rect x="41.8487%" y="277" width="1.6134%" height="15" fill="rgb(222,74,54)"/><text x="42.0987%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 1.61%)</title><rect x="41.8487%" y="261" width="1.6134%" height="15" fill="rgb(216,99,12)"/><text x="42.0987%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 1.58%)</title><rect x="41.8824%" y="245" width="1.5798%" height="15" fill="rgb(226,22,26)"/><text x="42.1324%" y="255.50"></text></g><g><title>_int_free (27 samples, 0.91%)</title><rect x="42.5546%" y="229" width="0.9076%" height="15" fill="rgb(217,163,10)"/><text x="42.8046%" y="239.50"></text></g><g><title>tcache_put (6 samples, 0.20%)</title><rect x="43.2605%" y="213" width="0.2017%" height="15" fill="rgb(213,25,53)"/><text x="43.5105%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (119 samples, 4.00%)</title><rect x="39.7311%" y="421" width="4.0000%" height="15" fill="rgb(252,105,26)"/><text x="39.9811%" y="431.50">core..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110 samples, 3.70%)</title><rect x="40.0336%" y="405" width="3.6975%" height="15" fill="rgb(220,39,43)"/><text x="40.2836%" y="415.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7 samples, 0.24%)</title><rect x="43.4958%" y="389" width="0.2353%" height="15" fill="rgb(229,68,48)"/><text x="43.7458%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;fml::bytecode::heap::Pointer,&lt;alloc::vec::Vec&lt;fml::bytecode::heap::Pointer&gt; as alloc::vec::spec_extend::SpecExtend&lt;fml::bytecode::heap::Pointer,core::iter::adapters::chain::Chain&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;fml::bytecode::heap::Pointer&gt;,alloc::vec::into_iter::IntoIter&lt;fml::bytecode::heap::Pointer&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;fml::bytecode::heap::Pointer&gt;&gt;&gt;&gt;::spec_extend::{{closure}}&gt;::{{closure}}&gt; (7 samples, 0.24%)</title><rect x="43.4958%" y="373" width="0.2353%" height="15" fill="rgb(252,8,32)"/><text x="43.7458%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::Vec&lt;fml::bytecode::heap::Pointer&gt; as alloc::vec::spec_extend::SpecExtend&lt;fml::bytecode::heap::Pointer,core::iter::adapters::chain::Chain&lt;core::iter::adapters::chain::Chain&lt;alloc::vec::into_iter::IntoIter&lt;fml::bytecode::heap::Pointer&gt;,alloc::vec::into_iter::IntoIter&lt;fml::bytecode::heap::Pointer&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;fml::bytecode::heap::Pointer&gt;&gt;&gt;&gt;::spec_extend::{{closure}}&gt; (7 samples, 0.24%)</title><rect x="43.4958%" y="357" width="0.2353%" height="15" fill="rgb(223,20,43)"/><text x="43.7458%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (7 samples, 0.24%)</title><rect x="43.4958%" y="341" width="0.2353%" height="15" fill="rgb(229,81,49)"/><text x="43.7458%" y="351.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (7 samples, 0.24%)</title><rect x="43.4958%" y="325" width="0.2353%" height="15" fill="rgb(236,28,36)"/><text x="43.7458%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (151 samples, 5.08%)</title><rect x="38.6891%" y="437" width="5.0756%" height="15" fill="rgb(249,185,26)"/><text x="38.9391%" y="447.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (4 samples, 0.13%)</title><rect x="44.1345%" y="405" width="0.1345%" height="15" fill="rgb(249,174,33)"/><text x="44.3845%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (4 samples, 0.13%)</title><rect x="44.1345%" y="389" width="0.1345%" height="15" fill="rgb(233,201,37)"/><text x="44.3845%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.54%)</title><rect x="43.7647%" y="437" width="0.5378%" height="15" fill="rgb(221,78,26)"/><text x="44.0147%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (8 samples, 0.27%)</title><rect x="44.0336%" y="421" width="0.2689%" height="15" fill="rgb(250,127,30)"/><text x="44.2836%" y="431.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.64%)</title><rect x="44.4706%" y="325" width="0.6387%" height="15" fill="rgb(230,49,44)"/><text x="44.7206%" y="335.50"></text></g><g><title>tcache_get (10 samples, 0.34%)</title><rect x="44.7731%" y="309" width="0.3361%" height="15" fill="rgb(229,67,23)"/><text x="45.0231%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (238 samples, 8.00%)</title><rect x="37.3445%" y="501" width="8.0000%" height="15" fill="rgb(249,83,47)"/><text x="37.5945%" y="511.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (238 samples, 8.00%)</title><rect x="37.3445%" y="485" width="8.0000%" height="15" fill="rgb(215,43,3)"/><text x="37.5945%" y="495.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (234 samples, 7.87%)</title><rect x="37.4790%" y="469" width="7.8655%" height="15" fill="rgb(238,154,13)"/><text x="37.7290%" y="479.50">&lt;alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (207 samples, 6.96%)</title><rect x="38.3866%" y="453" width="6.9580%" height="15" fill="rgb(219,56,2)"/><text x="38.6366%" y="463.50">&lt;alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (31 samples, 1.04%)</title><rect x="44.3025%" y="437" width="1.0420%" height="15" fill="rgb(233,0,4)"/><text x="44.5525%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31 samples, 1.04%)</title><rect x="44.3025%" y="421" width="1.0420%" height="15" fill="rgb(235,30,7)"/><text x="44.5525%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.94%)</title><rect x="44.4034%" y="405" width="0.9412%" height="15" fill="rgb(250,79,13)"/><text x="44.6534%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 0.94%)</title><rect x="44.4034%" y="389" width="0.9412%" height="15" fill="rgb(211,146,34)"/><text x="44.6534%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.91%)</title><rect x="44.4370%" y="373" width="0.9076%" height="15" fill="rgb(228,22,38)"/><text x="44.6870%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.91%)</title><rect x="44.4370%" y="357" width="0.9076%" height="15" fill="rgb(235,168,5)"/><text x="44.6870%" y="367.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.87%)</title><rect x="44.4706%" y="341" width="0.8739%" height="15" fill="rgb(221,155,16)"/><text x="44.7206%" y="351.50"></text></g><g><title>__rust_alloc (5 samples, 0.17%)</title><rect x="45.1765%" y="325" width="0.1681%" height="15" fill="rgb(215,215,53)"/><text x="45.4265%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.27%)</title><rect x="45.8151%" y="421" width="0.2689%" height="15" fill="rgb(223,4,10)"/><text x="46.0651%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.27%)</title><rect x="45.8151%" y="405" width="0.2689%" height="15" fill="rgb(234,103,6)"/><text x="46.0651%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.24%)</title><rect x="45.8487%" y="389" width="0.2353%" height="15" fill="rgb(227,97,0)"/><text x="46.0987%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (6 samples, 0.20%)</title><rect x="45.8824%" y="373" width="0.2017%" height="15" fill="rgb(234,150,53)"/><text x="46.1324%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.10%)</title><rect x="46.1176%" y="357" width="0.1008%" height="15" fill="rgb(228,201,54)"/><text x="46.3676%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.10%)</title><rect x="46.1176%" y="341" width="0.1008%" height="15" fill="rgb(222,22,37)"/><text x="46.3676%" y="351.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.10%)</title><rect x="46.1176%" y="325" width="0.1008%" height="15" fill="rgb(237,53,32)"/><text x="46.3676%" y="335.50"></text></g><g><title>fml::bytecode::program::Size::make_vector (24 samples, 0.81%)</title><rect x="45.4454%" y="501" width="0.8067%" height="15" fill="rgb(233,25,53)"/><text x="45.6954%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (24 samples, 0.81%)</title><rect x="45.4454%" y="485" width="0.8067%" height="15" fill="rgb(210,40,34)"/><text x="45.6954%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (24 samples, 0.81%)</title><rect x="45.4454%" y="469" width="0.8067%" height="15" fill="rgb(241,220,44)"/><text x="45.6954%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.71%)</title><rect x="45.5462%" y="453" width="0.7059%" height="15" fill="rgb(235,28,35)"/><text x="45.7962%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13 samples, 0.44%)</title><rect x="45.8151%" y="437" width="0.4370%" height="15" fill="rgb(210,56,17)"/><text x="46.0651%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.17%)</title><rect x="46.0840%" y="421" width="0.1681%" height="15" fill="rgb(224,130,29)"/><text x="46.3340%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.17%)</title><rect x="46.0840%" y="405" width="0.1681%" height="15" fill="rgb(235,212,8)"/><text x="46.3340%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.13%)</title><rect x="46.1176%" y="389" width="0.1345%" height="15" fill="rgb(223,33,50)"/><text x="46.3676%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.13%)</title><rect x="46.1176%" y="373" width="0.1345%" height="15" fill="rgb(219,149,13)"/><text x="46.3676%" y="383.50"></text></g><g><title>fml::bytecode::state::Frame::from (5 samples, 0.17%)</title><rect x="46.2521%" y="501" width="0.1681%" height="15" fill="rgb(250,156,29)"/><text x="46.5021%" y="511.50"></text></g><g><title>fml::bytecode::state::FrameStack::push (12 samples, 0.40%)</title><rect x="46.4202%" y="501" width="0.4034%" height="15" fill="rgb(216,193,19)"/><text x="46.6702%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.40%)</title><rect x="46.4202%" y="485" width="0.4034%" height="15" fill="rgb(216,135,14)"/><text x="46.6702%" y="495.50"></text></g><g><title>core::ptr::write (10 samples, 0.34%)</title><rect x="46.4874%" y="469" width="0.3361%" height="15" fill="rgb(241,47,5)"/><text x="46.7374%" y="479.50"></text></g><g><title>fml::bytecode::interpreter::eval_call_object_method (316 samples, 10.62%)</title><rect x="36.2689%" y="517" width="10.6218%" height="15" fill="rgb(233,42,35)"/><text x="36.5189%" y="527.50">fml::bytecode::i..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.47%)</title><rect x="47.0252%" y="437" width="0.4706%" height="15" fill="rgb(231,13,6)"/><text x="47.2752%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.47%)</title><rect x="47.0252%" y="421" width="0.4706%" height="15" fill="rgb(207,181,40)"/><text x="47.2752%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.47%)</title><rect x="47.0252%" y="405" width="0.4706%" height="15" fill="rgb(254,173,49)"/><text x="47.2752%" y="415.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.10%)</title><rect x="47.3950%" y="389" width="0.1008%" height="15" fill="rgb(221,1,38)"/><text x="47.6450%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (25 samples, 0.84%)</title><rect x="46.9916%" y="469" width="0.8403%" height="15" fill="rgb(206,124,46)"/><text x="47.2416%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (25 samples, 0.84%)</title><rect x="46.9916%" y="453" width="0.8403%" height="15" fill="rgb(249,21,11)"/><text x="47.2416%" y="463.50"></text></g><g><title>core::hash::Hasher::write_u8 (10 samples, 0.34%)</title><rect x="47.4958%" y="437" width="0.3361%" height="15" fill="rgb(222,201,40)"/><text x="47.7458%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.27%)</title><rect x="47.5630%" y="421" width="0.2689%" height="15" fill="rgb(235,61,29)"/><text x="47.8130%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.27%)</title><rect x="47.5630%" y="405" width="0.2689%" height="15" fill="rgb(219,207,3)"/><text x="47.8130%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.27%)</title><rect x="47.5630%" y="389" width="0.2689%" height="15" fill="rgb(222,56,46)"/><text x="47.8130%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.10%)</title><rect x="48.0336%" y="421" width="0.1008%" height="15" fill="rgb(239,76,54)"/><text x="48.2836%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.17%)</title><rect x="48.2353%" y="405" width="0.1681%" height="15" fill="rgb(231,124,27)"/><text x="48.4853%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (18 samples, 0.61%)</title><rect x="47.8319%" y="469" width="0.6050%" height="15" fill="rgb(249,195,6)"/><text x="48.0819%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18 samples, 0.61%)</title><rect x="47.8319%" y="453" width="0.6050%" height="15" fill="rgb(237,174,47)"/><text x="48.0819%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 0.61%)</title><rect x="47.8319%" y="437" width="0.6050%" height="15" fill="rgb(206,201,31)"/><text x="48.0819%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.30%)</title><rect x="48.1345%" y="421" width="0.3025%" height="15" fill="rgb(231,57,52)"/><text x="48.3845%" y="431.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (50 samples, 1.68%)</title><rect x="46.9580%" y="485" width="1.6807%" height="15" fill="rgb(248,177,22)"/><text x="47.2080%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (6 samples, 0.20%)</title><rect x="48.4370%" y="469" width="0.2017%" height="15" fill="rgb(215,211,37)"/><text x="48.6870%" y="479.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.13%)</title><rect x="48.5042%" y="453" width="0.1345%" height="15" fill="rgb(241,128,51)"/><text x="48.7542%" y="463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.13%)</title><rect x="48.5042%" y="437" width="0.1345%" height="15" fill="rgb(227,165,31)"/><text x="48.7542%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.13%)</title><rect x="48.5042%" y="421" width="0.1345%" height="15" fill="rgb(228,167,24)"/><text x="48.7542%" y="431.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::is_empty (5 samples, 0.17%)</title><rect x="48.6387%" y="485" width="0.1681%" height="15" fill="rgb(228,143,12)"/><text x="48.8887%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.10%)</title><rect x="48.8067%" y="469" width="0.1008%" height="15" fill="rgb(249,149,8)"/><text x="49.0567%" y="479.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (18 samples, 0.61%)</title><rect x="49.1765%" y="405" width="0.6050%" height="15" fill="rgb(243,35,44)"/><text x="49.4265%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="389" width="0.2017%" height="15" fill="rgb(246,89,9)"/><text x="49.8298%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="373" width="0.2017%" height="15" fill="rgb(233,213,13)"/><text x="49.8298%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="357" width="0.2017%" height="15" fill="rgb(233,141,41)"/><text x="49.8298%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="341" width="0.2017%" height="15" fill="rgb(239,167,4)"/><text x="49.8298%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="325" width="0.2017%" height="15" fill="rgb(209,217,16)"/><text x="49.8298%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="309" width="0.2017%" height="15" fill="rgb(219,88,35)"/><text x="49.8298%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="293" width="0.2017%" height="15" fill="rgb(220,193,23)"/><text x="49.8298%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="277" width="0.2017%" height="15" fill="rgb(230,90,52)"/><text x="49.8298%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="261" width="0.2017%" height="15" fill="rgb(252,106,19)"/><text x="49.8298%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="245" width="0.2017%" height="15" fill="rgb(206,74,20)"/><text x="49.8298%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="229" width="0.2017%" height="15" fill="rgb(230,138,44)"/><text x="49.8298%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="49.5798%" y="213" width="0.2017%" height="15" fill="rgb(235,182,43)"/><text x="49.8298%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.74%)</title><rect x="49.1429%" y="437" width="0.7395%" height="15" fill="rgb(242,16,51)"/><text x="49.3929%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.71%)</title><rect x="49.1765%" y="421" width="0.7059%" height="15" fill="rgb(248,9,4)"/><text x="49.4265%" y="431.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (3 samples, 0.10%)</title><rect x="49.7815%" y="405" width="0.1008%" height="15" fill="rgb(210,31,22)"/><text x="50.0315%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="49.8824%" y="405" width="0.1008%" height="15" fill="rgb(239,54,39)"/><text x="50.1324%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (8 samples, 0.27%)</title><rect x="50.0168%" y="405" width="0.2689%" height="15" fill="rgb(230,99,41)"/><text x="50.2668%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.27%)</title><rect x="50.0168%" y="389" width="0.2689%" height="15" fill="rgb(253,106,12)"/><text x="50.2668%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.27%)</title><rect x="50.0168%" y="373" width="0.2689%" height="15" fill="rgb(213,46,41)"/><text x="50.2668%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::iter_hash (13 samples, 0.44%)</title><rect x="49.8824%" y="437" width="0.4370%" height="15" fill="rgb(215,133,35)"/><text x="50.1324%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawIterHash&lt;T&gt;::new (13 samples, 0.44%)</title><rect x="49.8824%" y="421" width="0.4370%" height="15" fill="rgb(213,28,5)"/><text x="50.1324%" y="431.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_object_method (536 samples, 18.02%)</title><rect x="32.9412%" y="533" width="18.0168%" height="15" fill="rgb(215,77,49)"/><text x="33.1912%" y="543.50">fml::bytecode::interpreter::..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (121 samples, 4.07%)</title><rect x="46.8908%" y="517" width="4.0672%" height="15" fill="rgb(248,100,22)"/><text x="47.1408%" y="527.50">inde..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (119 samples, 4.00%)</title><rect x="46.9580%" y="501" width="4.0000%" height="15" fill="rgb(208,67,9)"/><text x="47.2080%" y="511.50">inde..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (64 samples, 2.15%)</title><rect x="48.8067%" y="485" width="2.1513%" height="15" fill="rgb(219,133,21)"/><text x="49.0567%" y="495.50">i..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (61 samples, 2.05%)</title><rect x="48.9076%" y="469" width="2.0504%" height="15" fill="rgb(246,46,29)"/><text x="49.1576%" y="479.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (61 samples, 2.05%)</title><rect x="48.9076%" y="453" width="2.0504%" height="15" fill="rgb(246,185,52)"/><text x="49.1576%" y="463.50">h..</text></g><g><title>indexmap::map::core::equivalent::{{closure}} (19 samples, 0.64%)</title><rect x="50.3193%" y="437" width="0.6387%" height="15" fill="rgb(252,136,11)"/><text x="50.5693%" y="447.50"></text></g><g><title>&lt;Q as indexmap::equivalent::Equivalent&lt;K&gt;&gt;::equivalent (19 samples, 0.64%)</title><rect x="50.3193%" y="421" width="0.6387%" height="15" fill="rgb(219,138,53)"/><text x="50.5693%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (19 samples, 0.64%)</title><rect x="50.3193%" y="405" width="0.6387%" height="15" fill="rgb(211,51,23)"/><text x="50.5693%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (18 samples, 0.61%)</title><rect x="50.3529%" y="389" width="0.6050%" height="15" fill="rgb(247,221,28)"/><text x="50.6029%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.61%)</title><rect x="50.3529%" y="373" width="0.6050%" height="15" fill="rgb(251,222,45)"/><text x="50.6029%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (18 samples, 0.61%)</title><rect x="50.3529%" y="357" width="0.6050%" height="15" fill="rgb(217,162,53)"/><text x="50.6029%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.61%)</title><rect x="50.3529%" y="341" width="0.6050%" height="15" fill="rgb(229,93,14)"/><text x="50.6029%" y="351.50"></text></g><g><title>__memcmp_sse4_1 (10 samples, 0.34%)</title><rect x="50.6218%" y="325" width="0.3361%" height="15" fill="rgb(209,67,49)"/><text x="50.8718%" y="335.50"></text></g><g><title>fml::bytecode::interpreter::dispatch_method (797 samples, 26.79%)</title><rect x="24.3361%" y="549" width="26.7899%" height="15" fill="rgb(213,87,29)"/><text x="24.5861%" y="559.50">fml::bytecode::interpreter::dispatch_method</text></g><g><title>fml::bytecode::state::InstructionPointer::bump (5 samples, 0.17%)</title><rect x="50.9580%" y="533" width="0.1681%" height="15" fill="rgb(205,151,52)"/><text x="51.2080%" y="543.50"></text></g><g><title>fml::bytecode::program::Arity::to_usize (3 samples, 0.10%)</title><rect x="51.1261%" y="549" width="0.1008%" height="15" fill="rgb(253,215,39)"/><text x="51.3761%" y="559.50"></text></g><g><title>fml::bytecode::program::ConstantPool::get (4 samples, 0.13%)</title><rect x="51.2269%" y="549" width="0.1345%" height="15" fill="rgb(221,220,41)"/><text x="51.4769%" y="559.50"></text></g><g><title>fml::bytecode::program::ProgramObject::as_str (4 samples, 0.13%)</title><rect x="51.3613%" y="549" width="0.1345%" height="15" fill="rgb(218,133,21)"/><text x="51.6113%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (15 samples, 0.50%)</title><rect x="51.4958%" y="533" width="0.5042%" height="15" fill="rgb(221,193,43)"/><text x="51.7458%" y="543.50"></text></g><g><title>fml::bytecode::state::OperandStack::pop (66 samples, 2.22%)</title><rect x="51.4958%" y="549" width="2.2185%" height="15" fill="rgb(240,128,52)"/><text x="51.7458%" y="559.50">f..</text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,core::convert::Infallible&gt; for core::option::Option&lt;T&gt;&gt;::with_context (51 samples, 1.71%)</title><rect x="52.0000%" y="533" width="1.7143%" height="15" fill="rgb(253,114,12)"/><text x="52.2500%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (51 samples, 1.71%)</title><rect x="52.0000%" y="517" width="1.7143%" height="15" fill="rgb(215,223,47)"/><text x="52.2500%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (4 samples, 0.13%)</title><rect x="58.9244%" y="245" width="0.1345%" height="15" fill="rgb(248,225,23)"/><text x="59.1744%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (7 samples, 0.24%)</title><rect x="58.8571%" y="293" width="0.2353%" height="15" fill="rgb(250,108,0)"/><text x="59.1071%" y="303.50"></text></g><g><title>fml::bytecode::state::OperandStack::pop_reverse_sequence::{{closure}} (5 samples, 0.17%)</title><rect x="58.9244%" y="277" width="0.1681%" height="15" fill="rgb(228,208,7)"/><text x="59.1744%" y="287.50"></text></g><g><title>fml::bytecode::state::OperandStack::pop (5 samples, 0.17%)</title><rect x="58.9244%" y="261" width="0.1681%" height="15" fill="rgb(244,45,10)"/><text x="59.1744%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 0.97%)</title><rect x="58.3866%" y="325" width="0.9748%" height="15" fill="rgb(207,125,25)"/><text x="58.6366%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.71%)</title><rect x="58.6555%" y="309" width="0.7059%" height="15" fill="rgb(210,195,18)"/><text x="58.9055%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.27%)</title><rect x="59.0924%" y="293" width="0.2689%" height="15" fill="rgb(249,80,12)"/><text x="59.3424%" y="303.50"></text></g><g><title>core::mem::replace (3 samples, 0.10%)</title><rect x="59.2605%" y="277" width="0.1008%" height="15" fill="rgb(221,65,9)"/><text x="59.5105%" y="287.50"></text></g><g><title>core::mem::swap (3 samples, 0.10%)</title><rect x="59.2605%" y="261" width="0.1008%" height="15" fill="rgb(235,49,36)"/><text x="59.5105%" y="271.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (3 samples, 0.10%)</title><rect x="59.2605%" y="245" width="0.1008%" height="15" fill="rgb(225,32,20)"/><text x="59.5105%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="59.2605%" y="229" width="0.1008%" height="15" fill="rgb(215,141,46)"/><text x="59.5105%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 2.29%)</title><rect x="57.2101%" y="373" width="2.2857%" height="15" fill="rgb(250,160,47)"/><text x="57.4601%" y="383.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (68 samples, 2.29%)</title><rect x="57.2101%" y="357" width="2.2857%" height="15" fill="rgb(216,222,40)"/><text x="57.4601%" y="367.50">c..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (68 samples, 2.29%)</title><rect x="57.2101%" y="341" width="2.2857%" height="15" fill="rgb(234,217,39)"/><text x="57.4601%" y="351.50">&lt;..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try::Try&gt;::Ok&gt;::into_try (3 samples, 0.10%)</title><rect x="59.3950%" y="325" width="0.1008%" height="15" fill="rgb(207,178,40)"/><text x="59.6450%" y="335.50"></text></g><g><title>__memcpy_ssse3 (8 samples, 0.27%)</title><rect x="60.3697%" y="213" width="0.2689%" height="15" fill="rgb(221,136,13)"/><text x="60.6197%" y="223.50"></text></g><g><title>_int_free (6 samples, 0.20%)</title><rect x="60.6387%" y="213" width="0.2017%" height="15" fill="rgb(249,199,10)"/><text x="60.8887%" y="223.50"></text></g><g><title>_int_realloc (38 samples, 1.28%)</title><rect x="60.0336%" y="229" width="1.2773%" height="15" fill="rgb(249,222,13)"/><text x="60.2836%" y="239.50"></text></g><g><title>_int_malloc (14 samples, 0.47%)</title><rect x="60.8403%" y="213" width="0.4706%" height="15" fill="rgb(244,185,38)"/><text x="61.0903%" y="223.50"></text></g><g><title>__GI___libc_realloc (52 samples, 1.75%)</title><rect x="59.5966%" y="245" width="1.7479%" height="15" fill="rgb(236,202,9)"/><text x="59.8466%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (57 samples, 1.92%)</title><rect x="59.5966%" y="309" width="1.9160%" height="15" fill="rgb(250,229,37)"/><text x="59.8466%" y="319.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (57 samples, 1.92%)</title><rect x="59.5966%" y="293" width="1.9160%" height="15" fill="rgb(206,174,23)"/><text x="59.8466%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (57 samples, 1.92%)</title><rect x="59.5966%" y="277" width="1.9160%" height="15" fill="rgb(211,33,43)"/><text x="59.8466%" y="287.50">a..</text></g><g><title>alloc::alloc::realloc (57 samples, 1.92%)</title><rect x="59.5966%" y="261" width="1.9160%" height="15" fill="rgb(245,58,50)"/><text x="59.8466%" y="271.50">a..</text></g><g><title>__rust_realloc (3 samples, 0.10%)</title><rect x="61.4118%" y="245" width="0.1008%" height="15" fill="rgb(244,68,36)"/><text x="61.6618%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (139 samples, 4.67%)</title><rect x="56.9412%" y="405" width="4.6723%" height="15" fill="rgb(232,229,15)"/><text x="57.1912%" y="415.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (134 samples, 4.50%)</title><rect x="57.1092%" y="389" width="4.5042%" height="15" fill="rgb(254,30,23)"/><text x="57.3592%" y="399.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (63 samples, 2.12%)</title><rect x="59.4958%" y="373" width="2.1176%" height="15" fill="rgb(235,160,14)"/><text x="59.7458%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (62 samples, 2.08%)</title><rect x="59.5294%" y="357" width="2.0840%" height="15" fill="rgb(212,155,44)"/><text x="59.7794%" y="367.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (62 samples, 2.08%)</title><rect x="59.5294%" y="341" width="2.0840%" height="15" fill="rgb(226,2,50)"/><text x="59.7794%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (62 samples, 2.08%)</title><rect x="59.5294%" y="325" width="2.0840%" height="15" fill="rgb(234,177,6)"/><text x="59.7794%" y="335.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (37 samples, 1.24%)</title><rect x="64.8739%" y="277" width="1.2437%" height="15" fill="rgb(217,24,9)"/><text x="65.1239%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (72 samples, 2.42%)</title><rect x="64.0672%" y="325" width="2.4202%" height="15" fill="rgb(220,13,46)"/><text x="64.3172%" y="335.50">co..</text></g><g><title>fml::bytecode::state::OperandStack::pop_reverse_sequence::{{closure}} (48 samples, 1.61%)</title><rect x="64.8739%" y="309" width="1.6134%" height="15" fill="rgb(239,221,27)"/><text x="65.1239%" y="319.50"></text></g><g><title>fml::bytecode::state::OperandStack::pop (48 samples, 1.61%)</title><rect x="64.8739%" y="293" width="1.6134%" height="15" fill="rgb(222,198,25)"/><text x="65.1239%" y="303.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,core::convert::Infallible&gt; for core::option::Option&lt;T&gt;&gt;::with_context (11 samples, 0.37%)</title><rect x="66.1176%" y="277" width="0.3697%" height="15" fill="rgb(211,99,13)"/><text x="66.3676%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (11 samples, 0.37%)</title><rect x="66.1176%" y="261" width="0.3697%" height="15" fill="rgb(232,111,31)"/><text x="66.3676%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (129 samples, 4.34%)</title><rect x="62.9244%" y="357" width="4.3361%" height="15" fill="rgb(245,82,37)"/><text x="63.1744%" y="367.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (120 samples, 4.03%)</title><rect x="63.2269%" y="341" width="4.0336%" height="15" fill="rgb(227,149,46)"/><text x="63.4769%" y="351.50">core..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23 samples, 0.77%)</title><rect x="66.4874%" y="325" width="0.7731%" height="15" fill="rgb(218,36,50)"/><text x="66.7374%" y="335.50"></text></g><g><title>core::mem::replace (5 samples, 0.17%)</title><rect x="67.0924%" y="309" width="0.1681%" height="15" fill="rgb(226,80,48)"/><text x="67.3424%" y="319.50"></text></g><g><title>core::mem::swap (5 samples, 0.17%)</title><rect x="67.0924%" y="293" width="0.1681%" height="15" fill="rgb(238,224,15)"/><text x="67.3424%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (5 samples, 0.17%)</title><rect x="67.0924%" y="277" width="0.1681%" height="15" fill="rgb(241,136,10)"/><text x="67.3424%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.17%)</title><rect x="67.0924%" y="261" width="0.1681%" height="15" fill="rgb(208,32,45)"/><text x="67.3424%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (170 samples, 5.71%)</title><rect x="61.6134%" y="405" width="5.7143%" height="15" fill="rgb(207,135,9)"/><text x="61.8634%" y="415.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::find (170 samples, 5.71%)</title><rect x="61.6134%" y="389" width="5.7143%" height="15" fill="rgb(206,86,44)"/><text x="61.8634%" y="399.50">core::i..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (170 samples, 5.71%)</title><rect x="61.6134%" y="373" width="5.7143%" height="15" fill="rgb(245,177,15)"/><text x="61.8634%" y="383.50">&lt;core::..</text></g><g><title>checked_request2size (5 samples, 0.17%)</title><rect x="68.2017%" y="277" width="0.1681%" height="15" fill="rgb(206,64,50)"/><text x="68.4517%" y="287.50"></text></g><g><title>__GI___libc_malloc (32 samples, 1.08%)</title><rect x="67.3950%" y="293" width="1.0756%" height="15" fill="rgb(234,36,40)"/><text x="67.6450%" y="303.50"></text></g><g><title>tcache_get (3 samples, 0.10%)</title><rect x="68.3697%" y="277" width="0.1008%" height="15" fill="rgb(213,64,8)"/><text x="68.6197%" y="287.50"></text></g><g><title>__rdl_alloc (6 samples, 0.20%)</title><rect x="68.4706%" y="293" width="0.2017%" height="15" fill="rgb(210,75,36)"/><text x="68.7206%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.20%)</title><rect x="68.4706%" y="277" width="0.2017%" height="15" fill="rgb(229,88,21)"/><text x="68.7206%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (46 samples, 1.55%)</title><rect x="67.3277%" y="405" width="1.5462%" height="15" fill="rgb(252,204,47)"/><text x="67.5777%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46 samples, 1.55%)</title><rect x="67.3277%" y="389" width="1.5462%" height="15" fill="rgb(208,77,27)"/><text x="67.5777%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 1.55%)</title><rect x="67.3277%" y="373" width="1.5462%" height="15" fill="rgb(221,76,26)"/><text x="67.5777%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 1.55%)</title><rect x="67.3277%" y="357" width="1.5462%" height="15" fill="rgb(225,139,18)"/><text x="67.5777%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 1.55%)</title><rect x="67.3277%" y="341" width="1.5462%" height="15" fill="rgb(230,137,11)"/><text x="67.5777%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 1.55%)</title><rect x="67.3277%" y="325" width="1.5462%" height="15" fill="rgb(212,28,1)"/><text x="67.5777%" y="335.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 1.51%)</title><rect x="67.3613%" y="309" width="1.5126%" height="15" fill="rgb(248,164,17)"/><text x="67.6113%" y="319.50"></text></g><g><title>__rust_alloc (6 samples, 0.20%)</title><rect x="68.6723%" y="293" width="0.2017%" height="15" fill="rgb(222,171,42)"/><text x="68.9223%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (369 samples, 12.40%)</title><rect x="56.5378%" y="421" width="12.4034%" height="15" fill="rgb(243,84,45)"/><text x="56.7878%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt;..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (429 samples, 14.42%)</title><rect x="54.5546%" y="485" width="14.4202%" height="15" fill="rgb(252,49,23)"/><text x="54.8046%" y="495.50">&lt;core::result::Result&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (429 samples, 14.42%)</title><rect x="54.5546%" y="469" width="14.4202%" height="15" fill="rgb(215,19,7)"/><text x="54.8046%" y="479.50">core::iter::traits::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (429 samples, 14.42%)</title><rect x="54.5546%" y="453" width="14.4202%" height="15" fill="rgb(238,81,41)"/><text x="54.8046%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (421 samples, 14.15%)</title><rect x="54.8235%" y="437" width="14.1513%" height="15" fill="rgb(210,199,37)"/><text x="55.0735%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (455 samples, 15.29%)</title><rect x="53.7143%" y="533" width="15.2941%" height="15" fill="rgb(244,192,49)"/><text x="53.9643%" y="543.50">core::iter::traits::ite..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (455 samples, 15.29%)</title><rect x="53.7143%" y="517" width="15.2941%" height="15" fill="rgb(226,211,11)"/><text x="53.9643%" y="527.50">&lt;core::result::Result&lt;V..</text></g><g><title>core::iter::adapters::process_results (455 samples, 15.29%)</title><rect x="53.7143%" y="501" width="15.2941%" height="15" fill="rgb(236,162,54)"/><text x="53.9643%" y="511.50">core::iter::adapters::p..</text></g><g><title>fml::bytecode::interpreter::eval_call_method (1,505 samples, 50.59%)</title><rect x="18.6555%" y="565" width="50.5882%" height="15" fill="rgb(220,229,9)"/><text x="18.9055%" y="575.50">fml::bytecode::interpreter::eval_call_method</text></g><g><title>fml::bytecode::state::OperandStack::pop_sequence (462 samples, 15.53%)</title><rect x="53.7143%" y="549" width="15.5294%" height="15" fill="rgb(250,87,22)"/><text x="53.9643%" y="559.50">fml::bytecode::state::Op..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (7 samples, 0.24%)</title><rect x="69.0084%" y="533" width="0.2353%" height="15" fill="rgb(239,43,17)"/><text x="69.2584%" y="543.50"></text></g><g><title>fml::bytecode::state::OperandStack::pop_sequence::{{closure}} (7 samples, 0.24%)</title><rect x="69.0084%" y="517" width="0.2353%" height="15" fill="rgb(231,177,25)"/><text x="69.2584%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (7 samples, 0.24%)</title><rect x="69.0084%" y="501" width="0.2353%" height="15" fill="rgb(219,179,1)"/><text x="69.2584%" y="511.50"></text></g><g><title>fml::bytecode::interpreter::eval_drop (9 samples, 0.30%)</title><rect x="69.2437%" y="565" width="0.3025%" height="15" fill="rgb(238,219,53)"/><text x="69.4937%" y="575.50"></text></g><g><title>fml::bytecode::state::OperandStack::pop (9 samples, 0.30%)</title><rect x="69.2437%" y="549" width="0.3025%" height="15" fill="rgb(232,167,36)"/><text x="69.4937%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (9 samples, 0.30%)</title><rect x="69.2437%" y="533" width="0.3025%" height="15" fill="rgb(244,19,51)"/><text x="69.4937%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (38 samples, 1.28%)</title><rect x="69.7815%" y="549" width="1.2773%" height="15" fill="rgb(224,6,22)"/><text x="70.0315%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.10%)</title><rect x="71.7647%" y="421" width="0.1008%" height="15" fill="rgb(224,145,5)"/><text x="72.0147%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.24%)</title><rect x="71.6975%" y="437" width="0.2353%" height="15" fill="rgb(234,130,49)"/><text x="71.9475%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.30%)</title><rect x="72.2017%" y="421" width="0.3025%" height="15" fill="rgb(254,6,2)"/><text x="72.4517%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (33 samples, 1.11%)</title><rect x="71.4958%" y="485" width="1.1092%" height="15" fill="rgb(208,96,46)"/><text x="71.7458%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (33 samples, 1.11%)</title><rect x="71.4958%" y="469" width="1.1092%" height="15" fill="rgb(239,3,39)"/><text x="71.7458%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (33 samples, 1.11%)</title><rect x="71.4958%" y="453" width="1.1092%" height="15" fill="rgb(233,210,1)"/><text x="71.7458%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (20 samples, 0.67%)</title><rect x="71.9328%" y="437" width="0.6723%" height="15" fill="rgb(244,137,37)"/><text x="72.1828%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.10%)</title><rect x="72.5042%" y="421" width="0.1008%" height="15" fill="rgb(240,136,2)"/><text x="72.7542%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.34%)</title><rect x="72.6050%" y="485" width="0.3361%" height="15" fill="rgb(239,18,37)"/><text x="72.8550%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.13%)</title><rect x="73.7815%" y="421" width="0.1345%" height="15" fill="rgb(218,185,22)"/><text x="74.0315%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (14 samples, 0.47%)</title><rect x="73.9160%" y="421" width="0.4706%" height="15" fill="rgb(225,218,4)"/><text x="74.1660%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.17%)</title><rect x="74.2185%" y="405" width="0.1681%" height="15" fill="rgb(230,182,32)"/><text x="74.4685%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (41 samples, 1.38%)</title><rect x="73.0420%" y="469" width="1.3782%" height="15" fill="rgb(242,56,43)"/><text x="73.2920%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (41 samples, 1.38%)</title><rect x="73.0420%" y="453" width="1.3782%" height="15" fill="rgb(233,99,24)"/><text x="73.2920%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 1.38%)</title><rect x="73.0420%" y="437" width="1.3782%" height="15" fill="rgb(234,209,42)"/><text x="73.2920%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (108 samples, 3.63%)</title><rect x="71.3950%" y="501" width="3.6303%" height="15" fill="rgb(227,7,12)"/><text x="71.6450%" y="511.50">inde..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (62 samples, 2.08%)</title><rect x="72.9412%" y="485" width="2.0840%" height="15" fill="rgb(245,203,43)"/><text x="73.1912%" y="495.50">c..</text></g><g><title>core::hash::Hasher::write_u8 (18 samples, 0.61%)</title><rect x="74.4202%" y="469" width="0.6050%" height="15" fill="rgb(238,205,33)"/><text x="74.6702%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.44%)</title><rect x="74.5882%" y="453" width="0.4370%" height="15" fill="rgb(231,56,7)"/><text x="74.8382%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.44%)</title><rect x="74.5882%" y="437" width="0.4370%" height="15" fill="rgb(244,186,29)"/><text x="74.8382%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.44%)</title><rect x="74.5882%" y="421" width="0.4370%" height="15" fill="rgb(234,111,31)"/><text x="74.8382%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.13%)</title><rect x="74.8908%" y="405" width="0.1345%" height="15" fill="rgb(241,149,10)"/><text x="75.1408%" y="415.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::is_empty (6 samples, 0.20%)</title><rect x="75.0252%" y="501" width="0.2017%" height="15" fill="rgb(249,206,44)"/><text x="75.2752%" y="511.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (20 samples, 0.67%)</title><rect x="76.1008%" y="421" width="0.6723%" height="15" fill="rgb(251,153,30)"/><text x="76.3508%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 1.14%)</title><rect x="75.7647%" y="453" width="1.1429%" height="15" fill="rgb(239,152,38)"/><text x="76.0147%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 1.01%)</title><rect x="75.8992%" y="437" width="1.0084%" height="15" fill="rgb(249,139,47)"/><text x="76.1492%" y="447.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (4 samples, 0.13%)</title><rect x="76.7731%" y="421" width="0.1345%" height="15" fill="rgb(244,64,35)"/><text x="77.0231%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.20%)</title><rect x="76.9076%" y="421" width="0.2017%" height="15" fill="rgb(216,46,15)"/><text x="77.1576%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (11 samples, 0.37%)</title><rect x="77.2101%" y="421" width="0.3697%" height="15" fill="rgb(250,74,19)"/><text x="77.4601%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11 samples, 0.37%)</title><rect x="77.2101%" y="405" width="0.3697%" height="15" fill="rgb(249,42,33)"/><text x="77.4601%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.37%)</title><rect x="77.2101%" y="389" width="0.3697%" height="15" fill="rgb(242,149,17)"/><text x="77.4601%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::iter_hash (27 samples, 0.91%)</title><rect x="76.9076%" y="453" width="0.9076%" height="15" fill="rgb(244,29,21)"/><text x="77.1576%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawIterHash&lt;T&gt;::new (27 samples, 0.91%)</title><rect x="76.9076%" y="437" width="0.9076%" height="15" fill="rgb(220,130,37)"/><text x="77.1576%" y="447.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (7 samples, 0.24%)</title><rect x="77.5798%" y="421" width="0.2353%" height="15" fill="rgb(211,67,2)"/><text x="77.8298%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (7 samples, 0.24%)</title><rect x="77.5798%" y="405" width="0.2353%" height="15" fill="rgb(235,68,52)"/><text x="77.8298%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (7 samples, 0.24%)</title><rect x="77.5798%" y="389" width="0.2353%" height="15" fill="rgb(246,142,3)"/><text x="77.8298%" y="399.50"></text></g><g><title>core::core_arch::simd::i8x16::new (7 samples, 0.24%)</title><rect x="77.5798%" y="373" width="0.2353%" height="15" fill="rgb(241,25,7)"/><text x="77.8298%" y="383.50"></text></g><g><title>fml::bytecode::heap::ObjectInstance::get_field (246 samples, 8.27%)</title><rect x="71.1261%" y="549" width="8.2689%" height="15" fill="rgb(242,119,39)"/><text x="71.3761%" y="559.50">fml::bytecod..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get (244 samples, 8.20%)</title><rect x="71.1933%" y="533" width="8.2017%" height="15" fill="rgb(241,98,45)"/><text x="71.4433%" y="543.50">indexmap::m..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (239 samples, 8.03%)</title><rect x="71.3613%" y="517" width="8.0336%" height="15" fill="rgb(254,28,30)"/><text x="71.6113%" y="527.50">indexmap::m..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (124 samples, 4.17%)</title><rect x="75.2269%" y="501" width="4.1681%" height="15" fill="rgb(241,142,54)"/><text x="75.4769%" y="511.50">index..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::get (123 samples, 4.13%)</title><rect x="75.2605%" y="485" width="4.1345%" height="15" fill="rgb(222,85,15)"/><text x="75.5105%" y="495.50">hashb..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find (123 samples, 4.13%)</title><rect x="75.2605%" y="469" width="4.1345%" height="15" fill="rgb(210,85,47)"/><text x="75.5105%" y="479.50">hashb..</text></g><g><title>indexmap::map::core::equivalent::{{closure}} (47 samples, 1.58%)</title><rect x="77.8151%" y="453" width="1.5798%" height="15" fill="rgb(224,206,25)"/><text x="78.0651%" y="463.50"></text></g><g><title>&lt;Q as indexmap::equivalent::Equivalent&lt;K&gt;&gt;::equivalent (47 samples, 1.58%)</title><rect x="77.8151%" y="437" width="1.5798%" height="15" fill="rgb(243,201,19)"/><text x="78.0651%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (46 samples, 1.55%)</title><rect x="77.8487%" y="421" width="1.5462%" height="15" fill="rgb(236,59,4)"/><text x="78.0987%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (46 samples, 1.55%)</title><rect x="77.8487%" y="405" width="1.5462%" height="15" fill="rgb(254,179,45)"/><text x="78.0987%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (46 samples, 1.55%)</title><rect x="77.8487%" y="389" width="1.5462%" height="15" fill="rgb(226,14,10)"/><text x="78.0987%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (46 samples, 1.55%)</title><rect x="77.8487%" y="373" width="1.5462%" height="15" fill="rgb(244,27,41)"/><text x="78.0987%" y="383.50"></text></g><g><title>__memcmp_sse4_1 (20 samples, 0.67%)</title><rect x="78.7227%" y="357" width="0.6723%" height="15" fill="rgb(235,35,32)"/><text x="78.9727%" y="367.50"></text></g><g><title>fml::bytecode::heap::Pointer::into_heap_reference (15 samples, 0.50%)</title><rect x="79.3950%" y="549" width="0.5042%" height="15" fill="rgb(218,68,31)"/><text x="79.6450%" y="559.50"></text></g><g><title>fml::bytecode::program::ProgramObject::as_str (4 samples, 0.13%)</title><rect x="79.8992%" y="549" width="0.1345%" height="15" fill="rgb(207,120,37)"/><text x="80.1492%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (8 samples, 0.27%)</title><rect x="80.0336%" y="533" width="0.2689%" height="15" fill="rgb(227,98,0)"/><text x="80.2836%" y="543.50"></text></g><g><title>fml::bytecode::interpreter::eval_get_field (342 samples, 11.50%)</title><rect x="69.5462%" y="565" width="11.4958%" height="15" fill="rgb(207,7,3)"/><text x="69.7962%" y="575.50">fml::bytecode::in..</text></g><g><title>fml::bytecode::state::OperandStack::pop (30 samples, 1.01%)</title><rect x="80.0336%" y="549" width="1.0084%" height="15" fill="rgb(206,98,19)"/><text x="80.2836%" y="559.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,core::convert::Infallible&gt; for core::option::Option&lt;T&gt;&gt;::with_context (22 samples, 0.74%)</title><rect x="80.3025%" y="533" width="0.7395%" height="15" fill="rgb(217,5,26)"/><text x="80.5525%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (22 samples, 0.74%)</title><rect x="80.3025%" y="517" width="0.7395%" height="15" fill="rgb(235,190,38)"/><text x="80.5525%" y="527.50"></text></g><g><title>fml::bytecode::state::Frame::get (18 samples, 0.61%)</title><rect x="81.1092%" y="549" width="0.6050%" height="15" fill="rgb(247,86,24)"/><text x="81.3592%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.17%)</title><rect x="81.5462%" y="533" width="0.1681%" height="15" fill="rgb(205,101,16)"/><text x="81.7962%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.17%)</title><rect x="81.5462%" y="517" width="0.1681%" height="15" fill="rgb(246,168,33)"/><text x="81.7962%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.17%)</title><rect x="81.5462%" y="501" width="0.1681%" height="15" fill="rgb(231,114,1)"/><text x="81.7962%" y="511.50"></text></g><g><title>fml::bytecode::state::FrameStack::get_locals (30 samples, 1.01%)</title><rect x="81.7143%" y="549" width="1.0084%" height="15" fill="rgb(207,184,53)"/><text x="81.9643%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (28 samples, 0.94%)</title><rect x="81.7815%" y="533" width="0.9412%" height="15" fill="rgb(224,95,51)"/><text x="82.0315%" y="543.50"></text></g><g><title>fml::bytecode::state::InstructionPointer::bump (11 samples, 0.37%)</title><rect x="82.7227%" y="549" width="0.3697%" height="15" fill="rgb(212,188,45)"/><text x="82.9727%" y="559.50"></text></g><g><title>fml::bytecode::interpreter::eval_get_local (78 samples, 2.62%)</title><rect x="81.0420%" y="565" width="2.6218%" height="15" fill="rgb(223,154,38)"/><text x="81.2920%" y="575.50">fm..</text></g><g><title>fml::bytecode::state::OperandStack::push (17 samples, 0.57%)</title><rect x="83.0924%" y="549" width="0.5714%" height="15" fill="rgb(251,22,52)"/><text x="83.3424%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.57%)</title><rect x="83.0924%" y="533" width="0.5714%" height="15" fill="rgb(229,209,22)"/><text x="83.3424%" y="543.50"></text></g><g><title>core::ptr::write (4 samples, 0.13%)</title><rect x="83.5294%" y="517" width="0.1345%" height="15" fill="rgb(234,138,34)"/><text x="83.7794%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.13%)</title><rect x="84.2353%" y="517" width="0.1345%" height="15" fill="rgb(212,95,11)"/><text x="84.4853%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.13%)</title><rect x="84.2353%" y="501" width="0.1345%" height="15" fill="rgb(240,179,47)"/><text x="84.4853%" y="511.50"></text></g><g><title>fml::bytecode::interpreter::eval_literal (20 samples, 0.67%)</title><rect x="83.7311%" y="565" width="0.6723%" height="15" fill="rgb(240,163,11)"/><text x="83.9811%" y="575.50"></text></g><g><title>fml::bytecode::state::OperandStack::push (10 samples, 0.34%)</title><rect x="84.0672%" y="549" width="0.3361%" height="15" fill="rgb(236,37,12)"/><text x="84.3172%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.34%)</title><rect x="84.0672%" y="533" width="0.3361%" height="15" fill="rgb(232,164,16)"/><text x="84.3172%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.10%)</title><rect x="84.5378%" y="549" width="0.1008%" height="15" fill="rgb(244,205,15)"/><text x="84.7878%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.27%)</title><rect x="84.7731%" y="389" width="0.2689%" height="15" fill="rgb(223,117,47)"/><text x="85.0231%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.27%)</title><rect x="84.7731%" y="373" width="0.2689%" height="15" fill="rgb(244,107,35)"/><text x="85.0231%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (7 samples, 0.24%)</title><rect x="84.8067%" y="357" width="0.2353%" height="15" fill="rgb(205,140,8)"/><text x="85.0567%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.24%)</title><rect x="84.8067%" y="341" width="0.2353%" height="15" fill="rgb(228,84,46)"/><text x="85.0567%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.24%)</title><rect x="84.8067%" y="325" width="0.2353%" height="15" fill="rgb(254,188,9)"/><text x="85.0567%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.24%)</title><rect x="84.8067%" y="309" width="0.2353%" height="15" fill="rgb(206,112,54)"/><text x="85.0567%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.24%)</title><rect x="84.8067%" y="293" width="0.2353%" height="15" fill="rgb(216,84,49)"/><text x="85.0567%" y="303.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.24%)</title><rect x="84.8067%" y="277" width="0.2353%" height="15" fill="rgb(214,194,35)"/><text x="85.0567%" y="287.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.24%)</title><rect x="84.8067%" y="261" width="0.2353%" height="15" fill="rgb(249,28,3)"/><text x="85.0567%" y="271.50"></text></g><g><title>_int_realloc (5 samples, 0.17%)</title><rect x="84.8739%" y="245" width="0.1681%" height="15" fill="rgb(222,56,52)"/><text x="85.1239%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (10 samples, 0.34%)</title><rect x="84.7395%" y="533" width="0.3361%" height="15" fill="rgb(245,217,50)"/><text x="84.9895%" y="543.50"></text></g><g><title>core::iter::adapters::process_results (10 samples, 0.34%)</title><rect x="84.7395%" y="517" width="0.3361%" height="15" fill="rgb(213,201,24)"/><text x="84.9895%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (10 samples, 0.34%)</title><rect x="84.7395%" y="501" width="0.3361%" height="15" fill="rgb(248,116,28)"/><text x="84.9895%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.34%)</title><rect x="84.7395%" y="485" width="0.3361%" height="15" fill="rgb(219,72,43)"/><text x="84.9895%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.34%)</title><rect x="84.7395%" y="469" width="0.3361%" height="15" fill="rgb(209,138,14)"/><text x="84.9895%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.34%)</title><rect x="84.7395%" y="453" width="0.3361%" height="15" fill="rgb(222,18,33)"/><text x="84.9895%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.34%)</title><rect x="84.7395%" y="437" width="0.3361%" height="15" fill="rgb(213,199,7)"/><text x="84.9895%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.30%)</title><rect x="84.7731%" y="421" width="0.3025%" height="15" fill="rgb(250,110,10)"/><text x="85.0231%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (9 samples, 0.30%)</title><rect x="84.7731%" y="405" width="0.3025%" height="15" fill="rgb(248,123,6)"/><text x="85.0231%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.20%)</title><rect x="85.1092%" y="501" width="0.2017%" height="15" fill="rgb(206,91,31)"/><text x="85.3592%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.20%)</title><rect x="85.1092%" y="485" width="0.2017%" height="15" fill="rgb(211,154,13)"/><text x="85.3592%" y="495.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (5 samples, 0.17%)</title><rect x="85.1429%" y="469" width="0.1681%" height="15" fill="rgb(225,148,7)"/><text x="85.3929%" y="479.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16 samples, 0.54%)</title><rect x="85.1092%" y="517" width="0.5378%" height="15" fill="rgb(220,160,43)"/><text x="85.3592%" y="527.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::reserve (10 samples, 0.34%)</title><rect x="85.3109%" y="501" width="0.3361%" height="15" fill="rgb(213,52,39)"/><text x="85.5609%" y="511.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve (10 samples, 0.34%)</title><rect x="85.3109%" y="485" width="0.3361%" height="15" fill="rgb(243,137,7)"/><text x="85.5609%" y="495.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (10 samples, 0.34%)</title><rect x="85.3109%" y="469" width="0.3361%" height="15" fill="rgb(230,79,13)"/><text x="85.5609%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (10 samples, 0.34%)</title><rect x="85.3109%" y="453" width="0.3361%" height="15" fill="rgb(247,105,23)"/><text x="85.5609%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (10 samples, 0.34%)</title><rect x="85.3109%" y="437" width="0.3361%" height="15" fill="rgb(223,179,41)"/><text x="85.5609%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (10 samples, 0.34%)</title><rect x="85.3109%" y="421" width="0.3361%" height="15" fill="rgb(218,9,34)"/><text x="85.5609%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (10 samples, 0.34%)</title><rect x="85.3109%" y="405" width="0.3361%" height="15" fill="rgb(222,106,8)"/><text x="85.5609%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.34%)</title><rect x="85.3109%" y="389" width="0.3361%" height="15" fill="rgb(211,220,0)"/><text x="85.5609%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 0.34%)</title><rect x="85.3109%" y="373" width="0.3361%" height="15" fill="rgb(229,52,16)"/><text x="85.5609%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (10 samples, 0.34%)</title><rect x="85.3109%" y="357" width="0.3361%" height="15" fill="rgb(212,155,18)"/><text x="85.5609%" y="367.50"></text></g><g><title>alloc::alloc::realloc (10 samples, 0.34%)</title><rect x="85.3109%" y="341" width="0.3361%" height="15" fill="rgb(242,21,14)"/><text x="85.5609%" y="351.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.34%)</title><rect x="85.3109%" y="325" width="0.3361%" height="15" fill="rgb(222,19,48)"/><text x="85.5609%" y="335.50"></text></g><g><title>_int_realloc (10 samples, 0.34%)</title><rect x="85.3109%" y="309" width="0.3361%" height="15" fill="rgb(232,45,27)"/><text x="85.5609%" y="319.50"></text></g><g><title>_int_malloc (6 samples, 0.20%)</title><rect x="85.4454%" y="293" width="0.2017%" height="15" fill="rgb(249,103,42)"/><text x="85.6954%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (28 samples, 0.94%)</title><rect x="84.7395%" y="549" width="0.9412%" height="15" fill="rgb(246,81,33)"/><text x="84.9895%" y="559.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 0.61%)</title><rect x="85.0756%" y="533" width="0.6050%" height="15" fill="rgb(252,33,42)"/><text x="85.3256%" y="543.50"></text></g><g><title>fml::bytecode::heap::Heap::allocate (6 samples, 0.20%)</title><rect x="85.8151%" y="549" width="0.2017%" height="15" fill="rgb(209,212,41)"/><text x="86.0651%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.13%)</title><rect x="85.8824%" y="533" width="0.1345%" height="15" fill="rgb(207,154,6)"/><text x="86.1324%" y="543.50"></text></g><g><title>core::ptr::write (3 samples, 0.10%)</title><rect x="85.9160%" y="517" width="0.1008%" height="15" fill="rgb(223,64,47)"/><text x="86.1660%" y="527.50"></text></g><g><title>__memcpy_ssse3 (3 samples, 0.10%)</title><rect x="85.9160%" y="501" width="0.1008%" height="15" fill="rgb(211,161,38)"/><text x="86.1660%" y="511.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (4 samples, 0.13%)</title><rect x="86.0168%" y="517" width="0.1345%" height="15" fill="rgb(219,138,40)"/><text x="86.2668%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4 samples, 0.13%)</title><rect x="86.0168%" y="501" width="0.1345%" height="15" fill="rgb(241,228,46)"/><text x="86.2668%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4 samples, 0.13%)</title><rect x="86.0168%" y="485" width="0.1345%" height="15" fill="rgb(223,209,38)"/><text x="86.2668%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="86.0168%" y="469" width="0.1345%" height="15" fill="rgb(236,164,45)"/><text x="86.2668%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="86.0168%" y="453" width="0.1345%" height="15" fill="rgb(231,15,5)"/><text x="86.2668%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.13%)</title><rect x="86.0168%" y="437" width="0.1345%" height="15" fill="rgb(252,35,15)"/><text x="86.2668%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::find_insert_slot (5 samples, 0.17%)</title><rect x="86.2857%" y="469" width="0.1681%" height="15" fill="rgb(248,181,18)"/><text x="86.5357%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::insert (12 samples, 0.40%)</title><rect x="86.2857%" y="485" width="0.4034%" height="15" fill="rgb(233,39,42)"/><text x="86.5357%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::reserve (7 samples, 0.24%)</title><rect x="86.4538%" y="469" width="0.2353%" height="15" fill="rgb(238,110,33)"/><text x="86.7038%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::reserve_rehash (7 samples, 0.24%)</title><rect x="86.4538%" y="453" width="0.2353%" height="15" fill="rgb(233,195,10)"/><text x="86.7038%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::resize (7 samples, 0.24%)</title><rect x="86.4538%" y="437" width="0.2353%" height="15" fill="rgb(254,105,3)"/><text x="86.7038%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::fallible_with_capacity (6 samples, 0.20%)</title><rect x="86.4874%" y="421" width="0.2017%" height="15" fill="rgb(221,225,9)"/><text x="86.7374%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::new_uninitialized (5 samples, 0.17%)</title><rect x="86.5210%" y="405" width="0.1681%" height="15" fill="rgb(224,227,45)"/><text x="86.7710%" y="415.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.17%)</title><rect x="86.5210%" y="389" width="0.1681%" height="15" fill="rgb(229,198,43)"/><text x="86.7710%" y="399.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.17%)</title><rect x="86.5210%" y="373" width="0.1681%" height="15" fill="rgb(206,209,35)"/><text x="86.7710%" y="383.50"></text></g><g><title>_int_malloc (4 samples, 0.13%)</title><rect x="86.5546%" y="357" width="0.1345%" height="15" fill="rgb(245,195,53)"/><text x="86.8046%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="357" width="0.1008%" height="15" fill="rgb(240,92,26)"/><text x="87.0735%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="341" width="0.1008%" height="15" fill="rgb(207,40,23)"/><text x="87.0735%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="325" width="0.1008%" height="15" fill="rgb(223,111,35)"/><text x="87.0735%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="309" width="0.1008%" height="15" fill="rgb(229,147,28)"/><text x="87.0735%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="293" width="0.1008%" height="15" fill="rgb(211,29,28)"/><text x="87.0735%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="277" width="0.1008%" height="15" fill="rgb(228,72,33)"/><text x="87.0735%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="261" width="0.1008%" height="15" fill="rgb(205,214,31)"/><text x="87.0735%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="86.8235%" y="245" width="0.1008%" height="15" fill="rgb(224,111,15)"/><text x="87.0735%" y="255.50"></text></g><g><title>_int_malloc (7 samples, 0.24%)</title><rect x="86.7227%" y="373" width="0.2353%" height="15" fill="rgb(253,21,26)"/><text x="86.9727%" y="383.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.27%)</title><rect x="86.7227%" y="389" width="0.2689%" height="15" fill="rgb(245,139,43)"/><text x="86.9727%" y="399.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (30 samples, 1.01%)</title><rect x="86.0168%" y="549" width="1.0084%" height="15" fill="rgb(252,170,7)"/><text x="86.2668%" y="559.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (30 samples, 1.01%)</title><rect x="86.0168%" y="533" width="1.0084%" height="15" fill="rgb(231,118,14)"/><text x="86.2668%" y="543.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (26 samples, 0.87%)</title><rect x="86.1513%" y="517" width="0.8739%" height="15" fill="rgb(238,83,0)"/><text x="86.4013%" y="527.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (24 samples, 0.81%)</title><rect x="86.2185%" y="501" width="0.8067%" height="15" fill="rgb(221,39,39)"/><text x="86.4685%" y="511.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (10 samples, 0.34%)</title><rect x="86.6891%" y="485" width="0.3361%" height="15" fill="rgb(222,119,46)"/><text x="86.9391%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (10 samples, 0.34%)</title><rect x="86.6891%" y="469" width="0.3361%" height="15" fill="rgb(222,165,49)"/><text x="86.9391%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (10 samples, 0.34%)</title><rect x="86.6891%" y="453" width="0.3361%" height="15" fill="rgb(219,113,52)"/><text x="86.9391%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (10 samples, 0.34%)</title><rect x="86.6891%" y="437" width="0.3361%" height="15" fill="rgb(214,7,15)"/><text x="86.9391%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (10 samples, 0.34%)</title><rect x="86.6891%" y="421" width="0.3361%" height="15" fill="rgb(235,32,4)"/><text x="86.9391%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.34%)</title><rect x="86.6891%" y="405" width="0.3361%" height="15" fill="rgb(238,90,54)"/><text x="86.9391%" y="415.50"></text></g><g><title>fml::bytecode::interpreter::eval_object (80 samples, 2.69%)</title><rect x="84.4034%" y="565" width="2.6891%" height="15" fill="rgb(213,208,19)"/><text x="84.6534%" y="575.50">fm..</text></g><g><title>core::fmt::Write::write_char (17 samples, 0.57%)</title><rect x="87.0924%" y="549" width="0.5714%" height="15" fill="rgb(233,156,4)"/><text x="87.3424%" y="559.50"></text></g><g><title>&lt;fml::bytecode::state::Output as core::fmt::Write&gt;::write_str (17 samples, 0.57%)</title><rect x="87.0924%" y="533" width="0.5714%" height="15" fill="rgb(207,194,5)"/><text x="87.3424%" y="543.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (17 samples, 0.57%)</title><rect x="87.0924%" y="517" width="0.5714%" height="15" fill="rgb(206,111,30)"/><text x="87.3424%" y="527.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (16 samples, 0.54%)</title><rect x="87.1261%" y="501" width="0.5378%" height="15" fill="rgb(243,70,54)"/><text x="87.3761%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (16 samples, 0.54%)</title><rect x="87.1261%" y="485" width="0.5378%" height="15" fill="rgb(242,28,8)"/><text x="87.3761%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 0.47%)</title><rect x="87.1933%" y="469" width="0.4706%" height="15" fill="rgb(219,106,18)"/><text x="87.4433%" y="479.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 0.47%)</title><rect x="87.1933%" y="453" width="0.4706%" height="15" fill="rgb(244,222,10)"/><text x="87.4433%" y="463.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (11 samples, 0.37%)</title><rect x="87.2941%" y="437" width="0.3697%" height="15" fill="rgb(236,179,52)"/><text x="87.5441%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (11 samples, 0.37%)</title><rect x="87.2941%" y="421" width="0.3697%" height="15" fill="rgb(213,23,39)"/><text x="87.5441%" y="431.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (11 samples, 0.37%)</title><rect x="87.2941%" y="405" width="0.3697%" height="15" fill="rgb(238,48,10)"/><text x="87.5441%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (11 samples, 0.37%)</title><rect x="87.2941%" y="389" width="0.3697%" height="15" fill="rgb(251,196,23)"/><text x="87.5441%" y="399.50"></text></g><g><title>__libc_write (11 samples, 0.37%)</title><rect x="87.2941%" y="373" width="0.3697%" height="15" fill="rgb(250,152,24)"/><text x="87.5441%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.37%)</title><rect x="87.2941%" y="357" width="0.3697%" height="15" fill="rgb(209,150,17)"/><text x="87.5441%" y="367.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="341" width="0.3361%" height="15" fill="rgb(234,202,34)"/><text x="87.5777%" y="351.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="325" width="0.3361%" height="15" fill="rgb(253,148,53)"/><text x="87.5777%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="309" width="0.3361%" height="15" fill="rgb(218,129,16)"/><text x="87.5777%" y="319.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="293" width="0.3361%" height="15" fill="rgb(216,85,19)"/><text x="87.5777%" y="303.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="277" width="0.3361%" height="15" fill="rgb(235,228,7)"/><text x="87.5777%" y="287.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="261" width="0.3361%" height="15" fill="rgb(245,175,0)"/><text x="87.5777%" y="271.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="245" width="0.3361%" height="15" fill="rgb(208,168,36)"/><text x="87.5777%" y="255.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="229" width="0.3361%" height="15" fill="rgb(246,171,24)"/><text x="87.5777%" y="239.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="213" width="0.3361%" height="15" fill="rgb(215,142,24)"/><text x="87.5777%" y="223.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="197" width="0.3361%" height="15" fill="rgb(250,187,7)"/><text x="87.5777%" y="207.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="181" width="0.3361%" height="15" fill="rgb(228,66,33)"/><text x="87.5777%" y="191.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="165" width="0.3361%" height="15" fill="rgb(234,215,21)"/><text x="87.5777%" y="175.50"></text></g><g><title>[unknown] (10 samples, 0.34%)</title><rect x="87.3277%" y="149" width="0.3361%" height="15" fill="rgb(222,191,20)"/><text x="87.5777%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="87.3950%" y="133" width="0.2689%" height="15" fill="rgb(245,79,54)"/><text x="87.6450%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="87.3950%" y="117" width="0.2689%" height="15" fill="rgb(240,10,37)"/><text x="87.6450%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="87.3950%" y="101" width="0.2689%" height="15" fill="rgb(214,192,32)"/><text x="87.6450%" y="111.50"></text></g><g><title>[unknown] (8 samples, 0.27%)</title><rect x="87.3950%" y="85" width="0.2689%" height="15" fill="rgb(209,36,54)"/><text x="87.6450%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="87.4622%" y="69" width="0.2017%" height="15" fill="rgb(220,10,11)"/><text x="87.7122%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.13%)</title><rect x="87.5294%" y="53" width="0.1345%" height="15" fill="rgb(221,106,17)"/><text x="87.7794%" y="63.50"></text></g><g><title>[unknown] (3 samples, 0.10%)</title><rect x="87.5630%" y="37" width="0.1008%" height="15" fill="rgb(251,142,44)"/><text x="87.8130%" y="47.50"></text></g><g><title>fml::bytecode::interpreter::eval_print (18 samples, 0.61%)</title><rect x="87.0924%" y="565" width="0.6050%" height="15" fill="rgb(238,13,15)"/><text x="87.3424%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.17%)</title><rect x="88.1345%" y="517" width="0.1681%" height="15" fill="rgb(208,107,27)"/><text x="88.3845%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.17%)</title><rect x="88.1345%" y="501" width="0.1681%" height="15" fill="rgb(205,136,37)"/><text x="88.3845%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (21 samples, 0.71%)</title><rect x="87.7311%" y="533" width="0.7059%" height="15" fill="rgb(250,205,27)"/><text x="87.9811%" y="543.50"></text></g><g><title>core::ptr::read (4 samples, 0.13%)</title><rect x="88.3025%" y="517" width="0.1345%" height="15" fill="rgb(210,80,43)"/><text x="88.5525%" y="527.50"></text></g><g><title>fml::bytecode::interpreter::eval_return (32 samples, 1.08%)</title><rect x="87.6975%" y="565" width="1.0756%" height="15" fill="rgb(247,160,36)"/><text x="87.9475%" y="575.50"></text></g><g><title>fml::bytecode::state::FrameStack::pop (31 samples, 1.04%)</title><rect x="87.7311%" y="549" width="1.0420%" height="15" fill="rgb(234,13,49)"/><text x="87.9811%" y="559.50"></text></g><g><title>anyhow::context::&lt;impl anyhow::Context&lt;T,core::convert::Infallible&gt; for core::option::Option&lt;T&gt;&gt;::with_context (10 samples, 0.34%)</title><rect x="88.4370%" y="533" width="0.3361%" height="15" fill="rgb(234,122,0)"/><text x="88.6870%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (10 samples, 0.34%)</title><rect x="88.4370%" y="517" width="0.3361%" height="15" fill="rgb(207,146,38)"/><text x="88.6870%" y="527.50"></text></g><g><title>fml::bytecode::heap::ObjectInstance::set_field (7 samples, 0.24%)</title><rect x="88.7731%" y="549" width="0.2353%" height="15" fill="rgb(207,177,25)"/><text x="89.0231%" y="559.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (5 samples, 0.17%)</title><rect x="88.8403%" y="533" width="0.1681%" height="15" fill="rgb(211,178,42)"/><text x="89.0903%" y="543.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (5 samples, 0.17%)</title><rect x="88.8403%" y="517" width="0.1681%" height="15" fill="rgb(230,69,54)"/><text x="89.0903%" y="527.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (3 samples, 0.10%)</title><rect x="88.9076%" y="501" width="0.1008%" height="15" fill="rgb(214,135,41)"/><text x="89.1576%" y="511.50"></text></g><g><title>fml::bytecode::interpreter::eval_set_field (9 samples, 0.30%)</title><rect x="88.7731%" y="565" width="0.3025%" height="15" fill="rgb(237,67,25)"/><text x="89.0231%" y="575.50"></text></g><g><title>fml::bytecode::state::Frame::set (8 samples, 0.27%)</title><rect x="89.1092%" y="549" width="0.2689%" height="15" fill="rgb(222,189,50)"/><text x="89.3592%" y="559.50"></text></g><g><title>fml::bytecode::interpreter::eval_set_local (13 samples, 0.44%)</title><rect x="89.0756%" y="565" width="0.4370%" height="15" fill="rgb(245,148,34)"/><text x="89.3256%" y="575.50"></text></g><g><title>fml::bytecode::state::OperandStack::peek (4 samples, 0.13%)</title><rect x="89.3782%" y="549" width="0.1345%" height="15" fill="rgb(222,29,6)"/><text x="89.6282%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (4 samples, 0.13%)</title><rect x="89.3782%" y="533" width="0.1345%" height="15" fill="rgb(221,189,43)"/><text x="89.6282%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.17%)</title><rect x="90.4202%" y="421" width="0.1681%" height="15" fill="rgb(207,36,27)"/><text x="90.6702%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16 samples, 0.54%)</title><rect x="90.1513%" y="437" width="0.5378%" height="15" fill="rgb(217,90,24)"/><text x="90.4013%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.10%)</title><rect x="90.5882%" y="421" width="0.1008%" height="15" fill="rgb(224,66,35)"/><text x="90.8382%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.20%)</title><rect x="90.9580%" y="421" width="0.2017%" height="15" fill="rgb(221,13,50)"/><text x="91.2080%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (44 samples, 1.48%)</title><rect x="89.9496%" y="485" width="1.4790%" height="15" fill="rgb(236,68,49)"/><text x="90.1996%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (44 samples, 1.48%)</title><rect x="89.9496%" y="469" width="1.4790%" height="15" fill="rgb(229,146,28)"/><text x="90.1996%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (44 samples, 1.48%)</title><rect x="89.9496%" y="453" width="1.4790%" height="15" fill="rgb(225,31,38)"/><text x="90.1996%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (22 samples, 0.74%)</title><rect x="90.6891%" y="437" width="0.7395%" height="15" fill="rgb(250,208,3)"/><text x="90.9391%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.27%)</title><rect x="91.1597%" y="421" width="0.2689%" height="15" fill="rgb(246,54,23)"/><text x="91.4097%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (18 samples, 0.61%)</title><rect x="91.4286%" y="485" width="0.6050%" height="15" fill="rgb(243,76,11)"/><text x="91.6786%" y="495.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (11 samples, 0.37%)</title><rect x="91.6639%" y="469" width="0.3697%" height="15" fill="rgb(245,21,50)"/><text x="91.9139%" y="479.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (11 samples, 0.37%)</title><rect x="91.6639%" y="453" width="0.3697%" height="15" fill="rgb(228,9,43)"/><text x="91.9139%" y="463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 0.37%)</title><rect x="91.6639%" y="437" width="0.3697%" height="15" fill="rgb(208,100,47)"/><text x="91.9139%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.24%)</title><rect x="93.2773%" y="405" width="0.2353%" height="15" fill="rgb(232,26,8)"/><text x="93.5273%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17 samples, 0.57%)</title><rect x="93.1092%" y="421" width="0.5714%" height="15" fill="rgb(216,166,38)"/><text x="93.3592%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.17%)</title><rect x="93.5126%" y="405" width="0.1681%" height="15" fill="rgb(251,202,51)"/><text x="93.7626%" y="415.50"></text></g><g><title>core::hash::sip::u8to64_le (14 samples, 0.47%)</title><rect x="93.6807%" y="421" width="0.4706%" height="15" fill="rgb(254,216,34)"/><text x="93.9307%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (65 samples, 2.18%)</title><rect x="92.1008%" y="469" width="2.1849%" height="15" fill="rgb(251,32,27)"/><text x="92.3508%" y="479.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (63 samples, 2.12%)</title><rect x="92.1681%" y="453" width="2.1176%" height="15" fill="rgb(208,127,28)"/><text x="92.4181%" y="463.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (63 samples, 2.12%)</title><rect x="92.1681%" y="437" width="2.1176%" height="15" fill="rgb(224,137,22)"/><text x="92.4181%" y="447.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.13%)</title><rect x="94.1513%" y="421" width="0.1345%" height="15" fill="rgb(254,70,32)"/><text x="94.4013%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (159 samples, 5.34%)</title><rect x="89.9496%" y="501" width="5.3445%" height="15" fill="rgb(229,75,37)"/><text x="90.1996%" y="511.50">hashbro..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (97 samples, 3.26%)</title><rect x="92.0336%" y="485" width="3.2605%" height="15" fill="rgb(252,64,23)"/><text x="92.2836%" y="495.50">cor..</text></g><g><title>core::hash::Hasher::write_u8 (30 samples, 1.01%)</title><rect x="94.2857%" y="469" width="1.0084%" height="15" fill="rgb(232,162,48)"/><text x="94.5357%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.97%)</title><rect x="94.3193%" y="453" width="0.9748%" height="15" fill="rgb(246,160,12)"/><text x="94.5693%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (29 samples, 0.97%)</title><rect x="94.3193%" y="437" width="0.9748%" height="15" fill="rgb(247,166,0)"/><text x="94.5693%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.97%)</title><rect x="94.3193%" y="421" width="0.9748%" height="15" fill="rgb(249,219,21)"/><text x="94.5693%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (16 samples, 0.54%)</title><rect x="94.7563%" y="405" width="0.5378%" height="15" fill="rgb(205,209,3)"/><text x="95.0063%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.67%)</title><rect x="95.6303%" y="485" width="0.6723%" height="15" fill="rgb(243,44,1)"/><text x="95.8803%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.67%)</title><rect x="95.6303%" y="469" width="0.6723%" height="15" fill="rgb(206,159,16)"/><text x="95.8803%" y="479.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (16 samples, 0.54%)</title><rect x="95.7647%" y="453" width="0.5378%" height="15" fill="rgb(244,77,30)"/><text x="96.0147%" y="463.50"></text></g><g><title>alloc::str::&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (9 samples, 0.30%)</title><rect x="96.3025%" y="469" width="0.3025%" height="15" fill="rgb(218,69,12)"/><text x="96.5525%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (9 samples, 0.30%)</title><rect x="96.3025%" y="453" width="0.3025%" height="15" fill="rgb(212,87,7)"/><text x="96.5525%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.30%)</title><rect x="96.3025%" y="437" width="0.3025%" height="15" fill="rgb(245,114,25)"/><text x="96.5525%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.17%)</title><rect x="96.4370%" y="421" width="0.1681%" height="15" fill="rgb(210,61,42)"/><text x="96.6870%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (52 samples, 1.75%)</title><rect x="96.3025%" y="485" width="1.7479%" height="15" fill="rgb(211,52,33)"/><text x="96.5525%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (43 samples, 1.45%)</title><rect x="96.6050%" y="469" width="1.4454%" height="15" fill="rgb(234,58,33)"/><text x="96.8550%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (43 samples, 1.45%)</title><rect x="96.6050%" y="453" width="1.4454%" height="15" fill="rgb(220,115,36)"/><text x="96.8550%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (43 samples, 1.45%)</title><rect x="96.6050%" y="437" width="1.4454%" height="15" fill="rgb(243,153,54)"/><text x="96.8550%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (43 samples, 1.45%)</title><rect x="96.6050%" y="421" width="1.4454%" height="15" fill="rgb(251,47,18)"/><text x="96.8550%" y="431.50"></text></g><g><title>__memcmp_sse4_1 (28 samples, 0.94%)</title><rect x="97.1092%" y="405" width="0.9412%" height="15" fill="rgb(242,102,42)"/><text x="97.3592%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.54%)</title><rect x="98.0504%" y="453" width="0.5378%" height="15" fill="rgb(234,31,38)"/><text x="98.3004%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (4 samples, 0.13%)</title><rect x="98.6218%" y="453" width="0.1345%" height="15" fill="rgb(221,117,51)"/><text x="98.8718%" y="463.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.24%)</title><rect x="98.7563%" y="453" width="0.2353%" height="15" fill="rgb(212,20,18)"/><text x="99.0063%" y="463.50"></text></g><g><title>fml::bytecode::interpreter::eval_opcode (2,853 samples, 95.90%)</title><rect x="3.4286%" y="581" width="95.8992%" height="15" fill="rgb(245,133,36)"/><text x="3.6786%" y="591.50">fml::bytecode::interpreter::eval_opcode</text></g><g><title>fml::bytecode::program::Labels::get (292 samples, 9.82%)</title><rect x="89.5126%" y="565" width="9.8151%" height="15" fill="rgb(212,6,19)"/><text x="89.7626%" y="575.50">fml::bytecode:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (280 samples, 9.41%)</title><rect x="89.9160%" y="549" width="9.4118%" height="15" fill="rgb(218,1,36)"/><text x="90.1660%" y="559.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (280 samples, 9.41%)</title><rect x="89.9160%" y="533" width="9.4118%" height="15" fill="rgb(246,84,54)"/><text x="90.1660%" y="543.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (280 samples, 9.41%)</title><rect x="89.9160%" y="517" width="9.4118%" height="15" fill="rgb(242,110,6)"/><text x="90.1660%" y="527.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (120 samples, 4.03%)</title><rect x="95.2941%" y="501" width="4.0336%" height="15" fill="rgb(214,47,5)"/><text x="95.5441%" y="511.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (38 samples, 1.28%)</title><rect x="98.0504%" y="485" width="1.2773%" height="15" fill="rgb(218,159,25)"/><text x="98.3004%" y="495.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (38 samples, 1.28%)</title><rect x="98.0504%" y="469" width="1.2773%" height="15" fill="rgb(215,211,28)"/><text x="98.3004%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.30%)</title><rect x="99.0252%" y="453" width="0.3025%" height="15" fill="rgb(238,59,32)"/><text x="99.2752%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (9 samples, 0.30%)</title><rect x="99.0252%" y="437" width="0.3025%" height="15" fill="rgb(226,82,3)"/><text x="99.2752%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (9 samples, 0.30%)</title><rect x="99.0252%" y="421" width="0.3025%" height="15" fill="rgb(240,164,32)"/><text x="99.2752%" y="431.50"></text></g><g><title>core::core_arch::simd::i8x16::new (9 samples, 0.30%)</title><rect x="99.0252%" y="405" width="0.3025%" height="15" fill="rgb(232,46,7)"/><text x="99.2752%" y="415.50"></text></g><g><title>fml::bytecode::interpreter::evaluate_with_memory_config (2,961 samples, 99.53%)</title><rect x="0.1008%" y="613" width="99.5294%" height="15" fill="rgb(229,129,53)"/><text x="0.3508%" y="623.50">fml::bytecode::interpreter::evaluate_with_memory_config</text></g><g><title>fml::bytecode::interpreter::evaluate_with (2,951 samples, 99.19%)</title><rect x="0.4370%" y="597" width="99.1933%" height="15" fill="rgb(234,188,29)"/><text x="0.6870%" y="607.50">fml::bytecode::interpreter::evaluate_with</text></g><g><title>fml::bytecode::program::Code::get (9 samples, 0.30%)</title><rect x="99.3277%" y="581" width="0.3025%" height="15" fill="rgb(246,141,4)"/><text x="99.5777%" y="591.50"></text></g><g><title>fml::main (2,964 samples, 99.63%)</title><rect x="0.1008%" y="661" width="99.6303%" height="15" fill="rgb(229,23,39)"/><text x="0.3508%" y="671.50">fml::main</text></g><g><title>fml::Action::execute (2,964 samples, 99.63%)</title><rect x="0.1008%" y="645" width="99.6303%" height="15" fill="rgb(206,12,3)"/><text x="0.3508%" y="655.50">fml::Action::execute</text></g><g><title>fml::RunAction::run (2,964 samples, 99.63%)</title><rect x="0.1008%" y="629" width="99.6303%" height="15" fill="rgb(252,226,20)"/><text x="0.3508%" y="639.50">fml::RunAction::run</text></g><g><title>fml::fml::__parse__TopLevel::TopLevelParser::parse (3 samples, 0.10%)</title><rect x="99.6303%" y="613" width="0.1008%" height="15" fill="rgb(216,123,35)"/><text x="99.8803%" y="623.50"></text></g><g><title>lalrpop_util::state_machine::Parser&lt;D,I&gt;::drive (3 samples, 0.10%)</title><rect x="99.6303%" y="597" width="0.1008%" height="15" fill="rgb(212,68,40)"/><text x="99.8803%" y="607.50"></text></g><g><title>lalrpop_util::state_machine::Parser&lt;D,I&gt;::parse (3 samples, 0.10%)</title><rect x="99.6303%" y="581" width="0.1008%" height="15" fill="rgb(254,125,32)"/><text x="99.8803%" y="591.50"></text></g><g><title>lalrpop_util::state_machine::Parser&lt;D,I&gt;::next_token (3 samples, 0.10%)</title><rect x="99.6303%" y="565" width="0.1008%" height="15" fill="rgb(253,97,22)"/><text x="99.8803%" y="575.50"></text></g><g><title>&lt;lalrpop_util::lexer::Matcher&lt;E&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="99.6303%" y="549" width="0.1008%" height="15" fill="rgb(241,101,14)"/><text x="99.8803%" y="559.50"></text></g><g><title>[unknown] (2,968 samples, 99.76%)</title><rect x="0.0000%" y="677" width="99.7647%" height="15" fill="rgb(238,103,29)"/><text x="0.2500%" y="687.50">[unknown]</text></g><g><title>fml (2,969 samples, 99.80%)</title><rect x="0.0000%" y="693" width="99.7983%" height="15" fill="rgb(233,195,47)"/><text x="0.2500%" y="703.50">fml</text></g><g><title>all (2,975 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(246,218,30)"/><text x="0.2500%" y="719.50"></text></g><g><title>perf (6 samples, 0.20%)</title><rect x="99.7983%" y="693" width="0.2017%" height="15" fill="rgb(219,145,47)"/><text x="100.0483%" y="703.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="677" width="0.2017%" height="15" fill="rgb(243,12,26)"/><text x="100.0483%" y="687.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="661" width="0.2017%" height="15" fill="rgb(214,87,16)"/><text x="100.0483%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="645" width="0.2017%" height="15" fill="rgb(208,99,42)"/><text x="100.0483%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="629" width="0.2017%" height="15" fill="rgb(253,99,2)"/><text x="100.0483%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="613" width="0.2017%" height="15" fill="rgb(220,168,23)"/><text x="100.0483%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="597" width="0.2017%" height="15" fill="rgb(242,38,24)"/><text x="100.0483%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="581" width="0.2017%" height="15" fill="rgb(225,182,9)"/><text x="100.0483%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="565" width="0.2017%" height="15" fill="rgb(243,178,37)"/><text x="100.0483%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="549" width="0.2017%" height="15" fill="rgb(232,139,19)"/><text x="100.0483%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="533" width="0.2017%" height="15" fill="rgb(225,201,24)"/><text x="100.0483%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="517" width="0.2017%" height="15" fill="rgb(221,47,46)"/><text x="100.0483%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="501" width="0.2017%" height="15" fill="rgb(249,23,13)"/><text x="100.0483%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="485" width="0.2017%" height="15" fill="rgb(219,9,5)"/><text x="100.0483%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.20%)</title><rect x="99.7983%" y="469" width="0.2017%" height="15" fill="rgb(254,171,16)"/><text x="100.0483%" y="479.50"></text></g></svg></svg>